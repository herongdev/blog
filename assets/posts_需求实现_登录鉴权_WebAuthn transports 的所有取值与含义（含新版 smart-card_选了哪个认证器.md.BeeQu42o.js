import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.oqSrIbQK.js";const g=JSON.parse('{"title":"选了哪个认证器？能否区分「Google / Windows Hello / 安卓手机 / 苹果钥匙串」","description":"","frontmatter":{"title":"选了哪个认证器？能否区分「Google / Windows Hello / 安卓手机 / 苹果钥匙串」","date":"2025-09-16T00:00:00.000Z","tags":["WebAuthn","Passkeys","FIDO2"]},"headers":[],"relativePath":"posts/需求实现/登录鉴权/WebAuthn transports 的所有取值与含义（含新版 smart-card/选了哪个认证器.md","filePath":"posts/需求实现/登录鉴权/WebAuthn transports 的所有取值与含义（含新版 smart-card/选了哪个认证器.md","lastUpdated":1758475234000}'),n={name:"posts/需求实现/登录鉴权/WebAuthn transports 的所有取值与含义（含新版 smart-card/选了哪个认证器.md"};function l(h,s,r,p,k,o){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="结论速答" tabindex="-1">结论速答 <a class="header-anchor" href="#结论速答" aria-label="Permalink to &quot;结论速答&quot;">​</a></h2><ul><li><strong>浏览器不会把“品牌/提供方”直接告诉前端</strong>（这是刻意的隐私设计）。你<strong>无法</strong>仅凭 <code>navigator.credentials.get()</code> 的返回结果直接断言“用户点的是 Google、Windows Hello、Android 手机还是 Apple 钥匙串”。(<a href="https://www.w3.org/TR/webauthn-3/?utm_source=chatgpt.com" title="An API for accessing Public Key Credentials - Level 3" target="_blank" rel="noreferrer">W3C</a>)</li><li>你<strong>能拿到</strong>的是<strong>认证器类别</strong>：<code>credential.authenticatorAttachment</code> → <code>&quot;platform&quot;</code>（平台，如 Windows Hello/Touch ID/Android 平台密钥）或 <code>&quot;cross-platform&quot;</code>（漫游，如安全钥/YubiKey，或手机经 Hybrid/蓝牙/扫码）。但它<strong>不是品牌级别</strong>。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/authenticatorAttachment" title="PublicKeyCredential: authenticatorAttachment property - Web APIs | MDN" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li><li>如需在 UI 中展示“来自 Google / Apple / Windows Hello”等，正确做法是：<strong>在注册时记录 AAGUID → 服务端映射到提供方</strong>；认证时根据 <code>rawId</code> 找回该凭据的“提供方标签”并返回给前端显示。注意：移动端大多用 <strong>none attestation</strong>，AAGUID 仅用于<strong>展示</strong>，不应作为安全决策。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li></ul><h2 id="能拿到的前端信号" tabindex="-1">能拿到的前端信号 <a class="header-anchor" href="#能拿到的前端信号" aria-label="Permalink to &quot;能拿到的前端信号&quot;">​</a></h2><h3 id="_1-认证器-类别" tabindex="-1">1) 认证器“类别” <a class="header-anchor" href="#_1-认证器-类别" aria-label="Permalink to &quot;1) 认证器“类别”&quot;">​</a></h3><ul><li><code>credential.authenticatorAttachment</code>：<code>&quot;platform&quot;</code> / <code>&quot;cross-platform&quot;</code>。仅代表<strong>本机平台</strong>还是<strong>漫游/跨设备</strong>，<strong>不能</strong>细化到“Google/Apple/Windows”。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/authenticatorAttachment" title="PublicKeyCredential: authenticatorAttachment property - Web APIs | MDN" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li></ul><blockquote><p>例：若你想在“跨设备登录”后建议用户把凭据保存到本机，可用它来判断（Chrome 指南里就是这么建议的）。(<a href="https://web.dev/articles/passkey-form-autofill?utm_source=chatgpt.com" title="Sign in with a passkey through form autofill | Articles" target="_blank" rel="noreferrer">web.dev</a>)</p></blockquote><h3 id="_2-扩展结果-可选" tabindex="-1">2) 扩展结果（可选） <a class="header-anchor" href="#_2-扩展结果-可选" aria-label="Permalink to &quot;2) 扩展结果（可选）&quot;">​</a></h3><ul><li><code>credential.getClientExtensionResults()</code>：如你在 <code>publicKey.extensions</code> 里请求了扩展，这里会返回结果对象。它<strong>可能</strong>用于风险/设备判别（如 <code>devicePubKey</code> 帮你识别<strong>具体使用的那台设备</strong>），但<strong>仍不揭示“品牌”</strong>。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/WebAuthn_extensions" title="Web Authentication extensions - Web APIs | MDN" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li></ul><h3 id="_3-客户端能力-提示-非识别" tabindex="-1">3) 客户端能力/提示（非识别） <a class="header-anchor" href="#_3-客户端能力-提示-非识别" aria-label="Permalink to &quot;3) 客户端能力/提示（非识别）&quot;">​</a></h3><ul><li><code>PublicKeyCredential.getClientCapabilities()</code> 可让你探知<strong>是否支持 hybrid transport / 条件式自动填充</strong>等，以便调整 UI，但<strong>不是“用的是谁家”</strong>。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientCapabilities_static?utm_source=chatgpt.com" title="PublicKeyCredential: getClientCapabilities() static method" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li></ul><hr><h2 id="想显示-google-apple-windows-的正确方案-服务端主导" tabindex="-1">想显示“Google/Apple/Windows”的正确方案（服务端主导） <a class="header-anchor" href="#想显示-google-apple-windows-的正确方案-服务端主导" aria-label="Permalink to &quot;想显示“Google/Apple/Windows”的正确方案（服务端主导）&quot;">​</a></h2><h3 id="a-注册时-记录-aaguid-→-映射-提供方" tabindex="-1">A. 注册时：记录 AAGUID → 映射“提供方” <a class="header-anchor" href="#a-注册时-记录-aaguid-→-映射-提供方" aria-label="Permalink to &quot;A. 注册时：记录 AAGUID → 映射“提供方”&quot;">​</a></h3><ul><li>AAGUID 是“认证器型号/提供方”的 UUID。<strong>注册时</strong>（<code>create()</code>）在服务端解析并<strong>保存到凭据表</strong>，后续用于 UI 文案（例如“由 Google 密码管理器创建”）。官方示例与社区清单可直接映射 AAGUID → 提供方名称/图标。<strong>注意</strong>：无签名背书的场景仅用于展示。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li></ul><blockquote><p>复杂逻辑：提取 AAGUID 并存库</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：SimpleWebAuthn 注册校验后，拿到 AAGUID 并持久化（仅展示用途）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">verified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">registrationInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifyRegistrationResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aaguid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registrationInfo?.aaguid; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可能为 &#39;00000000-0000-0000-0000-000000000000&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：用官方推荐的社区清单将 AAGUID → 提供方标签（Google/Apple/…）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> provider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapAAGUIDToProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aaguid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例：&#39;Google Password Manager&#39; | &#39;iCloud Keychain&#39; | ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.credentials.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">upsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ credentialId, userId, aaguid, providerLabel: provider });</span></span></code></pre></div><p>资料：如何用 AAGUID 判定提供方 &amp; 社区清单链接（web.dev 文章）。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</p></blockquote><h3 id="b-认证时-凭-rawid-找回-提供方标签" tabindex="-1">B. 认证时：凭 <code>rawId</code> 找回“提供方标签” <a class="header-anchor" href="#b-认证时-凭-rawid-找回-提供方标签" aria-label="Permalink to &quot;B. 认证时：凭 \`rawId\` 找回“提供方标签”&quot;">​</a></h3><ul><li>登录 <code>get()</code> 成功后，前端把 <code>rawId</code> 发回；服务端校验通过后，<strong>根据 <code>rawId</code> 查询凭据表</strong>，把<strong>保存的 <code>providerLabel</code></strong> 回传给前端用于 UI 展示。</li><li>SimpleWebAuthn 还会告诉你<strong>凭据类型/是否多设备</strong>（<code>credentialDeviceType</code> / <code>credentialBackedUp</code>），可做补充标签（例如“多设备同步的 passkey”）。(<a href="https://simplewebauthn.dev/docs/advanced/passkeys?utm_source=chatgpt.com" title="Passkeys" target="_blank" rel="noreferrer">简单网页认证</a>)</li></ul><hr><h2 id="仅做-类别-与-跨设备-判断时-无需品牌" tabindex="-1">仅做“类别”与“跨设备”判断时（无需品牌） <a class="header-anchor" href="#仅做-类别-与-跨设备-判断时-无需品牌" aria-label="Permalink to &quot;仅做“类别”与“跨设备”判断时（无需品牌）&quot;">​</a></h2><blockquote><p>只改你现有前端<strong>必要行</strong>（按你的要求“只给改动”）：</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：读取认证器类别（platform/cross-platform），随 payload 发回，便于统计/风控/UI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> attachment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PublicKeyCredential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).authenticatorAttachment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;platform&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cross-platform&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：如你启用了扩展，这里拿到客户端扩展结果（可能含 devicePubKey 等），可一并上传分析</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clientExt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PublicKeyCredential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClientExtensionResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：把两个“提示性”字段附在 payload 里（非安全必需，仅用于展示/分析）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload.meta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  authenticatorAttachment: attachment,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clientExtensionResults: clientExt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h2 id="为什么不能直接知道-google-apple-windows-hello" tabindex="-1">为什么不能直接知道“Google / Apple / Windows Hello” <a class="header-anchor" href="#为什么不能直接知道-google-apple-windows-hello" aria-label="Permalink to &quot;为什么不能直接知道“Google / Apple / Windows Hello”&quot;">​</a></h2><ul><li><strong>规范与浏览器刻意最小化披露</strong>：避免把用户的设备/账户生态暴露给站点（隐私原则）。API 仅给“类别”（platform/cross-platform），<strong>不会</strong>告诉你“是 Google 还是 Apple”。(<a href="https://www.w3.org/TR/webauthn-3/?utm_source=chatgpt.com" title="An API for accessing Public Key Credentials - Level 3" target="_blank" rel="noreferrer">W3C</a>)</li><li><strong>AAGUID 仅在注册态可得且常为匿名化</strong>：很多平台默认 <code>none attestation</code>，即便有 AAGUID，也<strong>只适合做 UI 标签</strong>，不应做强安全策略。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li></ul><hr><h2 id="进阶-区分-手机-hybrid-vs-u-盘钥匙" tabindex="-1">进阶：区分“手机（Hybrid）” vs “U 盘钥匙” <a class="header-anchor" href="#进阶-区分-手机-hybrid-vs-u-盘钥匙" aria-label="Permalink to &quot;进阶：区分“手机（Hybrid）” vs “U 盘钥匙”&quot;">​</a></h2><ul><li><p><strong>严格来说，结果里也不直接告诉你</strong>。<code>&quot;cross-platform&quot;</code> 既可能是 <strong>安全钥（USB/NFC/BLE）</strong>，也可能是<strong>手机经 Hybrid</strong>。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/authenticatorAttachment" title="PublicKeyCredential: authenticatorAttachment property - Web APIs | MDN" target="_blank" rel="noreferrer">MDN Web Docs</a>)</p></li><li><p>可行的<strong>推断</strong>思路（仍非 100% 准确）：</p><ol><li>检查<strong>客户端能力</strong>是否支持 <code>hybridTransport</code>（仅做 UI/流程分支）。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientCapabilities_static?utm_source=chatgpt.com" title="PublicKeyCredential: getClientCapabilities() static method" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li><li>在请求里<strong>开启 <code>devicePubKey</code> 扩展</strong>并在服务端校验其输出，可用于<strong>识别“这次是同一台手机/设备”</strong>（设备指纹化的合规替代），但<strong>仍不是品牌信息</strong>。(<a href="https://github.com/w3c/webauthn/issues/1691?utm_source=chatgpt.com" title="devicePubKey extension MUST be supported if multi- ..." target="_blank" rel="noreferrer">GitHub</a>)</li></ol></li></ul><hr><h2 id="小抄-你可以立刻加的最小改动" tabindex="-1">小抄：你可以立刻加的最小改动 <a class="header-anchor" href="#小抄-你可以立刻加的最小改动" aria-label="Permalink to &quot;小抄：你可以立刻加的最小改动&quot;">​</a></h2><blockquote><p>前端（认证）——只贴<strong>需新增</strong>行：</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：把 authenticatorAttachment 带回去，便于服务端记录这次是平台还是漫游</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> attachment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (cred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PublicKeyCredential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).authenticatorAttachment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：如你要研究扩展结果（例如 devicePubKey），连同其他字段一起上传</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PublicKeyCredential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClientExtensionResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loginByCredential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload, meta: { attachment, ext } });</span></span></code></pre></div><blockquote><p>服务端（注册验证后）——只贴<strong>需新增</strong>行：</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：注册成功后，提取 AAGUID 并映射“提供方标签”（仅显示用途）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aaguid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> verification.registrationInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> providerLabel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapAAGUIDToProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aaguid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例：&#39;Google Password Manager&#39; | &#39;iCloud Keychain&#39; | &#39;Windows Hello&#39; | &#39;YubiKey&#39; | &#39;Unknown&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> saveCredential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ credentialId, userId, aaguid, providerLabel });</span></span></code></pre></div><blockquote><p>服务端（认证成功后）——只贴<strong>需新增</strong>行：</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：用 rawId 找回凭据，连同 providerLabel 返回前端做 UI 展示</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cred</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCredentialById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentialId);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, providerLabel: cred?.providerLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><hr><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><code>authenticatorAttachment</code> 仅提供<strong>类别</strong>（platform / cross-platform），不包含品牌。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/authenticatorAttachment" title="PublicKeyCredential: authenticatorAttachment property - Web APIs | MDN" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li><li>用 AAGUID 在<strong>注册时</strong>标注“哪个提供方创建了该 passkey”（仅用于展示；无背书时不要做安全决策）。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li><li>WebAuthn 的<strong>隐私/最小披露</strong>模型（无法直接知道品牌）。(<a href="https://www.w3.org/TR/webauthn-3/?utm_source=chatgpt.com" title="An API for accessing Public Key Credentials - Level 3" target="_blank" rel="noreferrer">W3C</a>)</li><li>客户端能力探测（hybridTransport/conditional UI 等）。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientCapabilities_static?utm_source=chatgpt.com" title="PublicKeyCredential: getClientCapabilities() static method" target="_blank" rel="noreferrer">MDN Web Docs</a>)</li><li>SimpleWebAuthn：注册/认证与 <strong>multiDevice/credentialBackedUp</strong> 语义，用于补充标签。(<a href="https://simplewebauthn.dev/docs/advanced/passkeys?utm_source=chatgpt.com" title="Passkeys" target="_blank" rel="noreferrer">简单网页认证</a>)</li></ul><hr><p>需要的话，我可以顺手给你一份<strong>AAGUID→ 提供方</strong>的 JSON 映射样例（含 Google/Apple/YubiKey/Windows Hello 的常见 AAGUID），以及<strong>注册环节如何在 none attestation 下做“仅展示用途”的安全说明</strong>。</p><p>好嘞，给你一套<strong>可直接用的 AAGUID → 提供方映射样例（JSON）</strong>，再配<strong>后端最小改动片段</strong>（注册提取并存 AAGUID、登录返回 providerLabel）。我只给<strong>必要片段</strong>，复杂逻辑在上一行写中文注释，符合你的习惯。</p><hr><h2 id="_1-aaguid-→-提供方映射-建议放到-aaguid-providers-ts" tabindex="-1">1) AAGUID → 提供方映射（建议放到 <code>aaguid.providers.ts</code>） <a class="header-anchor" href="#_1-aaguid-→-提供方映射-建议放到-aaguid-providers-ts" aria-label="Permalink to &quot;1) AAGUID → 提供方映射（建议放到 \`aaguid.providers.ts\`）&quot;">​</a></h2><blockquote><p>说明：这只是<strong>用于 UI 展示</strong>的“友好标签”，<strong>不要</strong>据此做安全决策；Apple/Safari 常见全 0 AAGUID，无法唯一指向 Apple。Google/Windows/YubiKey 取值参考了权威与社区清单（见文末引用）。</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：AAGUID → 人类可读标签（仅展示用途）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AAGUID_PROVIDER_MAP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Google Password Manager（Chrome/Android 等）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;ea9b8d66-4d01-1d21-3ce4-b6b48cb575d4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Google Password Manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:0]{index=0}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Windows Hello（多种形态）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;6028b017-b1d4-4c02-b4b3-afcdafc96bb2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows Hello (Software)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:1]{index=1}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;9ddd1817-af5a-4672-a2b9-3e3dd95000a9&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows Hello (VBS Hardware)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:2]{index=2}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;08987058-cadc-4b81-b6e1-30de50dcbe96&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows Hello (Hardware)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:3]{index=3}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Apple iCloud Keychain：常见 none attestation → 全 0（仅提示用，不可靠）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;00000000-0000-0000-0000-000000000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Unknown (可能是 iCloud Keychain / none attestation)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:4]{index=4}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // YubiKey（示例，型号/固件不同对应不同 AAGUID；更多见官方表）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;ee882879-721c-4913-9775-3dfcce97072a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YubiKey 5 (USB-A/5.2/5.4)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:5]{index=5}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;2fc0579f-8113-47ea-b116-bb5a8db9202a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YubiKey 5 NFC / 5C NFC (5.2/5.4)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:6]{index=6}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;fa2b99dc-9e39-4257-8f92-4a30d23c4118&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YubiKey 5 NFC (5.1)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:7]{index=7}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;f8a011f3-8c0a-4d15-8006-17111f9edc7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Security Key by Yubico (Blue/5.1)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// :contentReference[oaicite:8]{index=8}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><blockquote><p>可选增强：你也可以在启动时拉取<strong>社区维护清单</strong>（<code>passkeydeveloper/passkey-authenticator-aaguids</code>）缓存合并，用于展示；该清单不保证长期可用且<strong>不是</strong>安全来源。(<a href="https://www.w3.org/TR/webauthn-3/?utm_source=chatgpt.com" title="An API for accessing Public Key Credentials - Level 3" target="_blank" rel="noreferrer">GitHub</a>)</p></blockquote><hr><h2 id="_2-映射函数-空-未知兜底" tabindex="-1">2) 映射函数（空/未知兜底） <a class="header-anchor" href="#_2-映射函数-空-未知兜底" aria-label="Permalink to &quot;2) 映射函数（空/未知兜底）&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：把 AAGUID 映射成“展示用标签”，未知或空值兜底</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapAAGUIDToProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">aaguid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aaguid) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aaguid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AAGUID_PROVIDER_MAP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="_3-注册成功后-提取并持久化-aaguid-nestjs-simplewebauthn-v11" tabindex="-1">3) 注册成功后，提取并持久化 AAGUID（NestJS + simplewebauthn v11+） <a class="header-anchor" href="#_3-注册成功后-提取并持久化-aaguid-nestjs-simplewebauthn-v11" aria-label="Permalink to &quot;3) 注册成功后，提取并持久化 AAGUID（NestJS + simplewebauthn v11+）&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：注册校验成功后，提取 aaguid，仅用于 UI 展示（不要做安全准入）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">verified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">registrationInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifyRegistrationResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">verified </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registrationInfo)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnauthorizedException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid attestation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aaguid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> registrationInfo.aaguid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> providerLabel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapAAGUIDToProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aaguid);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：把 aaguid / providerLabel 和 credentialId、公钥、counter 等一起存库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentialsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">upsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  credentialId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">base64url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentialIDBuffer),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  publicKey: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">base64url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publicKeyBuffer),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  counter: registrationInfo.credential?.counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  aaguid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providerLabel, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ← 认证时可直接回传做 UI 展示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p>注：很多平台/浏览器默认 <strong>none attestation</strong>，AAGUID 可能是全 0 或不可用；因此<strong>只能展示</strong>，<strong>不要据此放行/拒绝</strong>。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/authenticatorAttachment" title="PublicKeyCredential: authenticatorAttachment property - Web APIs | MDN" target="_blank" rel="noreferrer">Stack Overflow</a>)</p></blockquote><hr><h2 id="_4-认证成功后-把-providerlabel-回给前端-方便-ui-显示-来自" tabindex="-1">4) 认证成功后，把 providerLabel 回给前端（方便 UI 显示“来自…”） <a class="header-anchor" href="#_4-认证成功后-把-providerlabel-回给前端-方便-ui-显示-来自" aria-label="Permalink to &quot;4) 认证成功后，把 providerLabel 回给前端（方便 UI 显示“来自…”）&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：校验断言通过后，用 rawId 定位凭据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cred</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentialsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload.rawId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：把之前存的 providerLabel 返回给前端，仅作展示</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ok: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providerLabel: cred?.providerLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 也可以带上 credentialDeviceType/credentialBackedUp 做补充标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h2 id="_5-关键注意" tabindex="-1">5) 关键注意 <a class="header-anchor" href="#_5-关键注意" aria-label="Permalink to &quot;5) 关键注意&quot;">​</a></h2><ul><li><strong>Apple / Safari</strong>：经常拿到<strong>全 0 AAGUID</strong>（或拿不到），这是隐私设计 + none attestation 的结果，<strong>不能</strong>唯一指向“Apple”。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">Apple Developer</a>)</li><li><strong>Windows Hello</strong>：存在<strong>多个 AAGUID</strong>（Software / Hardware / VBS Hardware），上面的三枚是公开常见值。(<a href="https://web.dev/articles/passkey-form-autofill?utm_source=chatgpt.com" title="Sign in with a passkey through form autofill | Articles" target="_blank" rel="noreferrer">corbado.com</a>)</li><li><strong>Google Password Manager</strong>：目前常见 AAGUID 为 <code>ea9b8d66-...</code>（历史上有过变化）。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/WebAuthn_extensions" title="Web Authentication extensions - Web APIs | MDN" target="_blank" rel="noreferrer">谷歌集团</a>)</li><li><strong>YubiKey</strong>：<strong>型号 + 固件版本</strong>不同会有不同 AAGUID，请以<strong>官方表</strong>为准（我在样例里只挑了几条常用）。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientCapabilities_static?utm_source=chatgpt.com" title="PublicKeyCredential: getClientCapabilities() static method" target="_blank" rel="noreferrer">Yubico Support</a>)</li><li><strong>用途边界</strong>：AAGUID 适合<strong>给用户看</strong>（“这把凭据来自 … ”），<strong>安全策略</strong>应以 FIDO MDS、证书链、政策（UV/UP、signCount 等）为主。(<a href="https://simplewebauthn.dev/docs/advanced/passkeys?utm_source=chatgpt.com" title="Passkeys" target="_blank" rel="noreferrer">W3C</a>)</li></ul><hr><h2 id="参考-1" tabindex="-1">参考 <a class="header-anchor" href="#参考-1" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>Google Password Manager AAGUID（官方/社区多处一致）。(<a href="https://github.com/w3c/webauthn/issues/1691?utm_source=chatgpt.com" title="devicePubKey extension MUST be supported if multi- ..." target="_blank" rel="noreferrer">corbado.com</a>)</li><li>Windows Hello 常见 AAGUID。(<a href="https://web.dev/articles/passkey-form-autofill?utm_source=chatgpt.com" title="Sign in with a passkey through form autofill | Articles" target="_blank" rel="noreferrer">corbado.com</a>)</li><li>YubiKey 官方 AAGUID 列表（持续更新）。(<a href="https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential/getClientCapabilities_static?utm_source=chatgpt.com" title="PublicKeyCredential: getClientCapabilities() static method" target="_blank" rel="noreferrer">Yubico Support</a>)</li><li>Apple/iCloud Keychain 常见全 0 AAGUID（none attestation）。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">Apple Developer</a>)</li><li>web.dev：用 AAGUID 仅做<strong>展示</strong>用途的最佳实践与社区清单。(<a href="https://web.dev/articles/webauthn-aaguid?utm_source=chatgpt.com" title="Determine the passkey provider with AAGUID | Articles" target="_blank" rel="noreferrer">web.dev</a>)</li></ul><p>需要的话我可以再给一版<strong>带图标的映射</strong>（顺手接入 <code>webauthn.passwordless.id</code> 的图标 CDN，命名为 <code>{aaguid}-light.png</code> / <code>{aaguid}-dark.png</code>），这样前端账号设置页能直接显示小图标。(<a href="https://webauthn.passwordless.id/demos/authenticators?utm_source=chatgpt.com" title="Passkeys authenticators list" target="_blank" rel="noreferrer">webauthn.passwordless.id</a>)</p>`,63)])])}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
