import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.oqSrIbQK.js";const g=JSON.parse('{"title":"Web Push 推送简介","description":"","frontmatter":{"title":"Web Push 推送简介","date":"2025-09-05T14:10:59.000Z","tags":null},"headers":[],"relativePath":"posts/Web-API-与推送/Web-Push/Web-Push-推送简介.md","filePath":"posts/Web-API-与推送/Web-Push/Web-Push-推送简介.md","lastUpdated":1758544231000}'),h={name:"posts/Web-API-与推送/Web-Push/Web-Push-推送简介.md"};function l(e,s,p,k,r,E){return n(),a("div",null,[...s[0]||(s[0]=[t(`<hr><p>title: Web Push 推送简介 date: 2025-09-05 categories: [Web 实时通讯, 浏览器推送] tags: [Web Push, Service Worker, PWA, VAPID, 离线通知, 实时消息] description: 全面介绍 Web Push 技术的原理、特点、实现步骤和典型应用场景，帮助前端/全栈开发者理解并快速落地。</p><hr><h1 id="什么是-web-push" tabindex="-1">什么是 Web Push？ <a class="header-anchor" href="#什么是-web-push" aria-label="Permalink to &quot;什么是 Web Push？&quot;">​</a></h1><p><strong>Web Push</strong> 是浏览器层面的 <strong>推送通知机制</strong>。与 WebSocket 或 SSE 不同，它不依赖页面是否处于前台，甚至用户没有打开网页也能收到通知。核心依赖：</p><ul><li><strong>Service Worker</strong>：浏览器的后台脚本，常驻运行。</li><li><strong>Push API</strong>：浏览器与推送服务（FCM、APNs 等）之间的推送通道。</li><li><strong>Notification API</strong>：展示系统级通知。</li></ul><p>特点：</p><ul><li><strong>跨平台</strong>：Chrome、Firefox、Edge、Safari（部分版本）均支持。</li><li><strong>后台可达</strong>：即使网页未激活或浏览器最小化也能收到。</li><li><strong>需用户授权</strong>：必须 HTTPS，且用户点击“允许通知”。</li><li><strong>带有身份机制</strong>：通过 VAPID（Voluntary Application Server Identification for Web Push）实现应用级认证。</li></ul><hr><h1 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h1><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant User as 用户浏览器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant SW as Service Worker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant PushSrv as 浏览器厂商推送服务(FCM等)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  participant Server as 应用服务端</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  User-&gt;&gt;Server: 注册并获取 VAPID 公钥</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  User-&gt;&gt;SW: 注册 Service Worker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  User-&gt;&gt;PushSrv: 订阅推送 (PushSubscription)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  User-&gt;&gt;Server: 上报订阅信息 (endpoint+keys)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Server-&gt;&gt;PushSrv: 使用 VAPID 私钥加密并发送消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PushSrv-&gt;&gt;SW: 转发推送</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SW-&gt;&gt;User: Notification API 展示通知</span></span></code></pre></div><hr><h1 id="核心实现步骤" tabindex="-1">核心实现步骤 <a class="header-anchor" href="#核心实现步骤" aria-label="Permalink to &quot;核心实现步骤&quot;">​</a></h1><h2 id="_1-生成-vapid-密钥对" tabindex="-1">1. 生成 VAPID 密钥对 <a class="header-anchor" href="#_1-生成-vapid-密钥对" aria-label="Permalink to &quot;1. 生成 VAPID 密钥对&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web-push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate-vapid-keys</span></span></code></pre></div><p>会得到 <strong>公钥 / 私钥</strong>，公钥发给前端，私钥保存在服务端。</p><hr><h2 id="_2-前端注册-service-worker" tabindex="-1">2. 前端注册 Service Worker <a class="header-anchor" href="#_2-前端注册-service-worker" aria-label="Permalink to &quot;2. 前端注册 Service Worker&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.serviceWorker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sw.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 申请通知权限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> permission</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Notification.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestPermission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;granted&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 订阅推送</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg.pushManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userVisibleOnly: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    applicationServerKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;VAPID_PUBLIC_KEY_BASE64URL&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 上报给服务端保存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/push/subscribe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sub) });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="_3-service-worker-处理推送" tabindex="-1">3. Service Worker 处理推送 <a class="header-anchor" href="#_3-service-worker-处理推送" aria-label="Permalink to &quot;3. Service Worker 处理推送&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// sw.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;push&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.data?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitUntil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    self.registration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;通知&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      body: data.body,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_4-服务端发送推送" tabindex="-1">4. 服务端发送推送 <a class="header-anchor" href="#_4-服务端发送推送" aria-label="Permalink to &quot;4. 服务端发送推送&quot;">​</a></h2><p>以 Node.js 为例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpush </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;web-push&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置 VAPID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webpush.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setVapidDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;mailto:admin@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VAPID_PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VAPID_PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// subs 存储用户的 PushSubscription</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendPush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpush.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sub, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h1 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景&quot;">​</a></h1><ul><li><strong>消息提醒</strong>：聊天应用收到新消息。</li><li><strong>电商营销</strong>：用户未登录页面也能收到促销信息。</li><li><strong>系统告警</strong>：后台监控推送紧急故障。</li><li><strong>PWA（渐进式 Web 应用）</strong>：接近原生 App 的体验。</li></ul><hr><h1 id="优缺点对比" tabindex="-1">优缺点对比 <a class="header-anchor" href="#优缺点对比" aria-label="Permalink to &quot;优缺点对比&quot;">​</a></h1><p>✅ 优点：</p><ul><li>浏览器级支持，后台可达。</li><li>无需页面常驻，适合通知类消息。</li><li>跨浏览器标准（W3C Push API）。</li></ul><p>⚠️ 缺点：</p><ul><li>依赖用户同意，存在拒绝率。</li><li>Safari 支持有限制（macOS 较晚才全面支持）。</li><li>消息大小有限制（通常 4KB）。</li><li>不适合大流量/高频推送（需 WebSocket/SSE）。</li></ul><hr><h1 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h1><p><strong>Web Push</strong> = <strong>Service Worker + Push API + Notification API</strong> 适合“提醒/通知”类场景，不适合实时高频通信。生产实践里常和 <strong>WebSocket/SSE</strong> 组合：</p><ul><li><strong>WebSocket</strong>：前台实时互动。</li><li><strong>Web Push</strong>：后台/离线通知兜底。</li></ul><hr><p>要不要我帮你写一个 <strong>完整的最小 Web Push DEMO 项目（前端+后端）</strong>，可以直接跑通并测试浏览器推送？</p>`,41)])])}const o=i(h,[["render",l]]);export{g as __pageData,o as default};
