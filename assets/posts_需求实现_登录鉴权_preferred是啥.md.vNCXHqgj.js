import{_ as e,c as i,o as t,ag as a}from"./chunks/framework.oqSrIbQK.js";const g=JSON.parse('{"title":"userVerification:","description":"","frontmatter":{"title":"userVerification:","date":"2025-09-08T00:12:36.000Z","tags":null},"headers":[],"relativePath":"posts/需求实现/登录鉴权/preferred是啥.md","filePath":"posts/需求实现/登录鉴权/preferred是啥.md","lastUpdated":1758163069000}'),o={name:"posts/需求实现/登录鉴权/preferred是啥.md"};function n(r,s,l,d,p,c){return t(),i("div",null,[...s[0]||(s[0]=[a(`<p>好，我逐条拆解你看到的这段响应，并把“该用什么值”“挑战长度”为啥看起来短、“大厂是不是也这样返回”讲清楚；最后给出<strong>只需改几行</strong>的建议（不贴整文件）。</p><hr><h1 id="_1、-userverification-preferred-是啥" tabindex="-1">1、<code>&quot;userVerification&quot;: &quot;preferred&quot;</code> 是啥？ <a class="header-anchor" href="#_1、-userverification-preferred-是啥" aria-label="Permalink to &quot;1、\`&quot;userVerification&quot;: &quot;preferred&quot;\` 是啥？&quot;">​</a></h1><p><strong>它告诉浏览器/认证器：是否必须做“本地用户验证（UV）”</strong>（指纹/人脸/PIN）。可选值只有 3 个：</p><table tabindex="0"><thead><tr><th>值</th><th>含义</th><th>常见效果/场景</th></tr></thead><tbody><tr><td><strong><code>required</code></strong></td><td><strong>必须</strong>进行本地用户验证（没有 UV 能力的认证器会被排除）</td><td>金融、后台管理、提升安全性。旧 U2F 钥匙（无 PIN）会被拒。</td></tr><tr><td><strong><code>preferred</code></strong>（你现在的值）</td><td><strong>优先</strong>做 UV，如果设备支持就做；不支持也可以继续</td><td>一般网站登录、降低失败率。绝大多数“平台 passkey”（Android/Apple）都会做 UV，所以体验和 <code>required</code> 基本一样。</td></tr><tr><td><strong><code>discouraged</code></strong></td><td><strong>不鼓励</strong>做 UV（允许仅“持有设备”就通过）</td><td>很少用；降低安全门槛，适合低风险二级操作（不建议用于登录）。</td></tr></tbody></table><blockquote><p>注意：这只是“<strong>意愿</strong>”。真正的<strong>强制</strong>要在<strong>服务端验证</strong>时也打开： <code>verifyRegistrationResponse/verifyAuthenticationResponse({ requireUserVerification: true })</code>。 否则前端说 <code>required</code>，服务端放宽为 <code>false</code>，就<strong>没有被强制</strong>。</p></blockquote><p><strong>给你的建议：</strong></p><ul><li>如果这是<strong>员工后台</strong>或敏感操作：前端设 <code>userVerification: &#39;required&#39;</code>，服务端配套 <code>requireUserVerification: true</code>。</li><li>如果是<strong>大众登录</strong>：<code>preferred</code> + 风控/设备指纹/异常登录再二次验证。</li></ul><h1 id="_2、这个-challenge-看起来-很短-正常吗" tabindex="-1">2、这个 <code>challenge</code> 看起来“很短”，正常吗？ <a class="header-anchor" href="#_2、这个-challenge-看起来-很短-正常吗" aria-label="Permalink to &quot;2、这个 \`challenge\` 看起来“很短”，正常吗？&quot;">​</a></h1><p><strong>正常。</strong></p><ul><li>simplewebauthn 默认生成 <strong>32 字节</strong>随机挑战（≈ <strong>256 bit</strong>）。</li><li>32 字节用 <strong>base64url</strong> 表示通常是 <strong>43~44 个字符</strong>（无 <code>=</code> 填充）。</li><li>你看到的：<code>jOr8QL_ExSr_7xsD2WUG1Kp8eM2lMiWNx8fFMg5wLyg</code>，长度 43，很标准。</li><li>我们服务端已把 challenge 统一按 <strong>base64url</strong> 存/比（你代码里已处理），与前端 <code>clientDataJSON.challenge</code> 能<strong>精确一致</strong>。</li></ul><blockquote><p>若你担心强度，也可以自定义更长挑战（例如 64 字节），但 32 字节已足够随机且是行业常见默认。</p></blockquote><h1 id="_3、大厂实践里返回的也是这种结构吗" tabindex="-1">3、大厂实践里返回的也是这种结构吗？ <a class="header-anchor" href="#_3、大厂实践里返回的也是这种结构吗" aria-label="Permalink to &quot;3、大厂实践里返回的也是这种结构吗？&quot;">​</a></h1><p><strong>是的。<strong>这就是 WebAuthn 规范的 <strong>PublicKeyCredentialRequestOptions(JSON)</strong> 的形态，各家（Google、Apple、微软、GitHub、PayPal…）都会返回类似结构。差异主要在</strong>有没有 <code>allowCredentials</code></strong> 和某些可选字段：</p><ul><li>一键直登/可发现凭证：<strong>省略 <code>allowCredentials</code></strong>（你现在就是），浏览器会弹出该 RP 的可用 passkey 列表。</li><li>指定账号登录：会带 <code>allowCredentials: [{ id, type: &#39;public-key&#39; }, ...]</code>。</li><li>其他常见字段：<code>rpId</code>、<code>challenge</code>、<code>timeout</code>、<code>userVerification</code>、有时 <code>extensions</code>。</li><li>前端会另外传 <code>mediation: &#39;conditional&#39;</code>（这不是 options 里的字段，而是 <code>navigator.credentials.get</code> 的参数，用于条件式 UI）。</li></ul><p>所以你这个响应：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;options&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rpId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;challenge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;…&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;userVerification&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preferred&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>完全合理</strong>、符合规范，也符合大厂常见做法（本地开发把 <code>rpId</code> 设为 <code>localhost</code> 没问题，上线要换为你的主域）。</p><h1 id="_4、如果你要-更安全-只改这几行-前后端各一处" tabindex="-1">4、如果你要“更安全”，只改这几行（前后端各一处） <a class="header-anchor" href="#_4、如果你要-更安全-只改这几行-前后端各一处" aria-label="Permalink to &quot;4、如果你要“更安全”，只改这几行（前后端各一处）&quot;">​</a></h1><p><strong>后端·验证时强制 UV（把 <code>false</code> 改为 <code>true</code>）</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂：强制需要本地用户验证（指纹/人脸/PIN）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requireUserVerification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><blockquote><p>出现位置：</p><ul><li><code>verifyRegistrationResponse({...})</code></li><li><code>verifyAuthenticationResponse({...})</code></li></ul></blockquote><p><strong>生成登录 options 时（可选）：把首选项也改为 required</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂：要求认证器执行 UV</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userVerification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;required&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><blockquote><p>这两处配合使用，才能做到“名副其实的强制 UV”。</p></blockquote><hr><h1 id="_5、小补充-别名-大小写别差异别担心" tabindex="-1">5、小补充：别名/大小写别差异别担心 <a class="header-anchor" href="#_5、小补充-别名-大小写别差异别担心" aria-label="Permalink to &quot;5、小补充：别名/大小写别差异别担心&quot;">​</a></h1><ul><li>simplewebauthn（v11+）返回的 JSON 用 <code>rpId</code>（小写 d）；</li><li>你传入 <code>generateAuthenticationOptions({ rpID: &#39;…&#39; })</code> 是库的入参写法；</li><li><strong>这是正常的</strong>：入参/出参字段命名略有差异，但库会正确映射。</li></ul>`,28)])])}const k=e(o,[["render",n]]);export{g as __pageData,k as default};
