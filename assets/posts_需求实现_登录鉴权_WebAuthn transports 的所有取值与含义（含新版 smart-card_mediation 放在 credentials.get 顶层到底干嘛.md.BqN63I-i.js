import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.oqSrIbQK.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/需求实现/登录鉴权/WebAuthn transports 的所有取值与含义（含新版 smart-card/mediation 放在 credentials.get 顶层到底干嘛.md","filePath":"posts/需求实现/登录鉴权/WebAuthn transports 的所有取值与含义（含新版 smart-card/mediation 放在 credentials.get 顶层到底干嘛.md","lastUpdated":1758903911000}'),l={name:"posts/需求实现/登录鉴权/WebAuthn transports 的所有取值与含义（含新版 smart-card/mediation 放在 credentials.get 顶层到底干嘛.md"};function e(p,s,h,o,k,r){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="_1-mediation-放在-credentials-get-顶层到底干嘛" tabindex="-1">1）<code>mediation</code> 放在 <code>credentials.get</code> 顶层到底干嘛？ <a class="header-anchor" href="#_1-mediation-放在-credentials-get-顶层到底干嘛" aria-label="Permalink to &quot;1）\`mediation\` 放在 \`credentials.get\` 顶层到底干嘛？&quot;">​</a></h2><p><code>navigator.credentials.get({ publicKey, mediation })</code> 的 <code>mediation</code> 是<strong>取凭据的“介入方式”</strong>，跟 WebAuthn 的 <code>publicKey</code> 选项是两块：</p><ul><li><p><strong><code>&#39;conditional&#39;</code>（条件式 UI）</strong></p><ul><li>典型用法：页面一加载或输入框聚焦就发起 <code>get(...)</code>，浏览器在<strong>输入框自动填充/下拉</strong>里展示“用通行密钥登录”。</li><li><strong>不需要用户先点击按钮</strong>；用户从下拉里点某个账号，Promise 才 resolve。</li><li>适合“无用户名/可发现凭据（discoverable）”的直登体验。</li></ul></li><li><p><strong><code>&#39;optional&#39;</code>（默认）</strong></p><ul><li>需要<strong>按钮触发</strong>（用户激活）后弹系统对话框。</li><li>适合你现在“点击【使用通行密钥登录】”这类显式触发。</li></ul></li><li><p><strong><code>&#39;required&#39;</code></strong></p><ul><li>强制出现“选择/确认”的 UI，不走自动化；对 WebAuthn 实际体验上跟 <code>optional</code> 区别不大，更多用于“别走自动登录”的场景。</li></ul></li><li><p><strong><code>&#39;silent&#39;</code></strong></p><ul><li>WebAuthn 基本不可用（不会静默给你断言），可忽略。</li></ul></li></ul><blockquote><p>结论：</p><ul><li><strong>自动填充场景</strong> → 用 <code>&#39;conditional&#39;</code>。</li><li><strong>点击按钮场景</strong> → 用 <code>&#39;optional&#39;</code>（或 <code>&#39;required&#39;</code>，差别很小）。</li></ul></blockquote><h2 id="_2-mode-roaming-only-是什么" tabindex="-1">2）<code>mode: &#39;roaming_only&#39;</code> 是什么？ <a class="header-anchor" href="#_2-mode-roaming-only-是什么" aria-label="Permalink to &quot;2）\`mode: &#39;roaming_only&#39;\` 是什么？&quot;">​</a></h2><p>这是<strong>我们上文建议的自定义字段</strong>，不是 WebAuthn 规范。 用途：告诉你的<strong>前端/风控逻辑</strong>“这次必须用<strong>漫游安全密钥</strong>（USB/NFC/BLE 的硬件钥）”。前端据此可以改变文案与兜底逻辑（例如失败就提示插入安全钥、给出备用登录方式等）。</p><blockquote><p>标准层面真正起作用的是 <code>allowCredentials</code> 的<strong>筛选集合</strong>和 <code>userVerification</code> 的强度要求，<code>mode</code> 只是你系统内的<strong>状态标签</strong>。</p></blockquote><h2 id="_3-为什么没看到-安全密钥选择列表-只提示-使用某种介质" tabindex="-1">3）为什么没看到“安全密钥选择列表”，只提示“使用某种介质”？ <a class="header-anchor" href="#_3-为什么没看到-安全密钥选择列表-只提示-使用某种介质" aria-label="Permalink to &quot;3）为什么没看到“安全密钥选择列表”，只提示“使用某种介质”？&quot;">​</a></h2><p>看你后端返回的 options：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;extensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [] },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;challenge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1758013239513162&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rpId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.52wukong.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;allowCredentials&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public-key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/NlEbL4Ozv4C+ZIig+td7Q==&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;transports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;userVerification&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关键问题有三点：</p><ol><li><p><strong>你把 <code>allowCredentials</code> 限定为“只有这一个 credentialId”</strong></p><ul><li>浏览器就会<strong>直接走这个凭据</strong>，不会给你“选择其它方式/设备”的列表（比如“附近的手机/iPhone/Google 管理器”）。</li><li>如果这枚凭据是<strong>硬件钥</strong>，UI 就只会提示“插入/轻触/连接”（也就是你看到的“用介质”）。</li><li>想要看到“用手机/用钥匙串/附近设备”的更多选项，<strong>不要传 <code>allowCredentials</code></strong>（走可发现凭据），让浏览器自己找可用的 passkey 与跨设备选项。</li></ul></li><li><p><strong><code>transports: []</code> 是空的</strong></p><ul><li>这是<strong>提示性信息</strong>，空数组会让提示很“泛”（比如 Safari 就只说“使用安全密钥”，不显示 USB/NFC/BLE 的具体指引）。</li><li>如果这是硬件钥，请把你保存的 <code>transports</code>（如 <code>[&quot;usb&quot;,&quot;nfc&quot;,&quot;ble&quot;]</code>）<strong>回填</strong>进去，用户引导会更清晰。</li></ul></li><li><p><strong>强度与超时未设置</strong></p><ul><li><p><code>userVerification: null</code> → 建议明确：</p><ul><li>普通登录用 <code>&#39;preferred&#39;</code>；</li><li>高风险必须 <code>&#39;required&#39;</code>。</li></ul></li><li><p><code>timeout: null</code> → 建议设置具体毫秒（如 60000）。</p></li></ul></li></ol><blockquote><p>额外提醒：</p><ul><li>你这份 <code>id</code> 看起来是 <strong>Base64</strong>（含 <code>+</code> <code>/</code> <code>=</code>），前端转换函数能兼容就行；规范常用 <strong>base64url</strong>。</li><li><code>extensions</code> 里套了个 <code>extensions</code> 字段没意义，可以直接删掉或按需设置真正的扩展。</li></ul></blockquote><hr><h2 id="_4-后端应该怎么回-只给必要片段" tabindex="-1">4）后端应该怎么回（只给必要片段） <a class="header-anchor" href="#_4-后端应该怎么回-只给必要片段" aria-label="Permalink to &quot;4）后端应该怎么回（只给必要片段）&quot;">​</a></h2><h3 id="a-通用登录-让用户可以用本机或跨设备的任何-passkey-适合-safari-chrome-ios-android-混合人群" tabindex="-1">A. 通用登录（让用户可以用<strong>本机或跨设备</strong>的任何 passkey；适合 Safari/Chrome/iOS/Android 混合人群） <a class="header-anchor" href="#a-通用登录-让用户可以用本机或跨设备的任何-passkey-适合-safari-chrome-ios-android-混合人群" aria-label="Permalink to &quot;A. 通用登录（让用户可以用**本机或跨设备**的任何 passkey；适合 Safari/Chrome/iOS/Android 混合人群）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：通用直登，不传 allowCredentials，交给浏览器发现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAuthenticationOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rpID: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.52wukong.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userVerification: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preferred&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 高风险可切 &#39;required&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不要传 allowCredentials</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // extensions: { /* 需要才加，如 devicePubKey */ }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：把 mediation 发给前端放在 credentials.get 顶层（自动填充体验）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { options, mediation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conditional&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>效果：</p><ul><li>Safari 上即便用户只在 Android/Google 那边绑定过，仍可通过<strong>跨设备</strong>（二维码/附近设备）完成登录。</li><li>Chrome 上能直接调起 Google Password Manager 的 passkey。</li><li>iOS 上能调起 iCloud 钥匙串。</li><li>你不做“平台”限定，不会把用户锁死。</li></ul><h3 id="b-高风险-→-只允许-安全密钥-硬件钥" tabindex="-1">B. 高风险 → <strong>只允许“安全密钥（硬件钥）”</strong> <a class="header-anchor" href="#b-高风险-→-只允许-安全密钥-硬件钥" aria-label="Permalink to &quot;B. 高风险 → **只允许“安全密钥（硬件钥）”**&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：从你库里筛出该用户“硬件钥”憑据（transports 包含 usb/nfc/ble）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> roamingCreds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userCreds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.transports?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;usb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nfc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ble&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (roamingCreds.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAuthenticationOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rpID: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.52wukong.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userVerification: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 强制本地解锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowCredentials: roamingCreds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id: base64url.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.credentialId),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public-key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 上一行：把已存的 transports 回填，改善提示（USB/NFC/BLE）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      transports: c.transports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 上一行：自定义标签，供前端 UI/风控使用（非 WebAuthn 规范）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    options,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mediation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;required&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;roaming_only&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一行：没有硬件钥 → 回落通用直登但强 UV，并提示用户尽快绑定安全钥</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAuthenticationOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rpID: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.52wukong.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userVerification: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: fallback,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mediation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;optional&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;any_passkey_fallback&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h2 id="_5-前端只需改这两行-你已有按钮触发场景" tabindex="-1">5）前端只需改这两行（你已有按钮触发场景） <a class="header-anchor" href="#_5-前端只需改这两行-你已有按钮触发场景" aria-label="Permalink to &quot;5）前端只需改这两行（你已有按钮触发场景）&quot;">​</a></h2><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- const cred = await navigator.credentials.get({ publicKey })</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：把后端返回的 mediation 放到顶层（conditional/optional/required）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ const cred = await navigator.credentials.get({ publicKey, mediation })</span></span></code></pre></div><p>（自动填充场景才用 <code>&#39;conditional&#39;</code>；按钮点击可用 <code>&#39;optional&#39;</code> 或 <code>&#39;required&#39;</code>。）</p><hr><h2 id="_6-一份-为什么不出现选择列表-的速查清单" tabindex="-1">6）一份“为什么不出现选择列表”的速查清单 <a class="header-anchor" href="#_6-一份-为什么不出现选择列表-的速查清单" aria-label="Permalink to &quot;6）一份“为什么不出现选择列表”的速查清单&quot;">​</a></h2><ul><li>✅ 想看到“附近设备 / 钥匙串 / Google 管理器” → <strong>不传 <code>allowCredentials</code></strong>（discoverable）。</li><li>✅ 只想让硬件钥可用 → <strong>传 <code>allowCredentials = 仅硬件钥的 credentialId 集合</code></strong>，并把 <strong><code>transports</code> 正确回填</strong>。</li><li>✅ 高风险 → <code>userVerification: &#39;required&#39;</code>。</li><li>✅ 自动填充体验（无需点击） → 顶层 <code>mediation: &#39;conditional&#39;</code>。</li><li>⚠️ 传了单个 <code>allowCredentials</code> → 浏览器<strong>直奔该凭据</strong>，不会给你“选择其它方式”的 UI（你现在就是这个情况）。</li><li>⚠️ <code>transports: []</code> → 提示信息会很“泛”，尽量回填 <code>[&quot;usb&quot;,&quot;nfc&quot;,&quot;ble&quot;]</code> 等。</li><li>⚠️ <code>rpId</code> 必须匹配当前页面域（或用 Related Origins 机制），否则 <code>SecurityError</code>。</li></ul><p>结论：这是<strong>注册（create）用的 options</strong>，不是登录（get）。结构里有几处会导致体验或兼容性问题：<code>challenge</code> 低熵/格式不规范、<code>user.id</code> 类型不对、<code>pubKeyCredParams</code> 为空、<code>extensions</code> 形态不对、<code>timeout</code> 为 null、<code>authenticatorAttachment: &#39;platform&#39;</code> 会强制仅平台认证器。下面只给<strong>需要改的字段</strong>（复杂点的上一行有注释）。</p><hr><h3 id="只改这些" tabindex="-1">只改这些 <a class="header-anchor" href="#只改这些" aria-label="Permalink to &quot;只改这些&quot;">​</a></h3><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;challenge&quot;: &quot;1758018552291119&quot;,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：必须是 32-64 字节的随机值，后端生成后以 base64url 返回（前端再转 ArrayBuffer）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;challenge&quot;: &quot;&lt;base64url(randomBytes[32~64])&gt;&quot;,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;rp&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;icon&quot;: null,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;name&quot;: &quot;GtcApp&quot;,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;id&quot;: &quot;www.52wukong.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- },</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：若登录页只在 www 子域，用 www.52wukong.com；若希望全子域通用，建议用根域 52wukong.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;rp&quot;: { &quot;name&quot;: &quot;GtcApp&quot;, &quot;id&quot;: &quot;52wukong.com&quot; },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;user&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;icon&quot;: null,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;name&quot;: &quot;herongxhr11@gmail.com&quot;,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;id&quot;: &quot;669876516&quot;,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;displayName&quot;: &quot;herongxhr11@gmail.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- },</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：user.id 必须是字节串（1-64 字节）。后端把内部 userId 编成字节再 base64url 返回；</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 前端再 b64url→ArrayBuffer。不要直接给十进制/普通字符串。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;user&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;name&quot;: &quot;herongxhr11@gmail.com&quot;,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;id&quot;: &quot;&lt;base64url(userIdBytes)&gt;&quot;,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;displayName&quot;: &quot;herongxhr11@gmail.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;pubKeyCredParams&quot;: [],</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：至少给出一种算法。最通用：ES256(-7)。如需兼容更多，可追加 RS256(-257)、EdDSA(-8)（按需）。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;pubKeyCredParams&quot;: [{ &quot;type&quot;: &quot;public-key&quot;, &quot;alg&quot;: -7 }],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;authenticatorSelection&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;authenticatorAttachment&quot;: &quot;platform&quot;,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;userVerification&quot;: &quot;required&quot;,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-   &quot;residentKey&quot;: &quot;required&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- },</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：只做“平台 Passkey”（Windows Hello / Touch ID / Android 平台）就保留 attachment: platform；</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 若同时允许安全钥/跨设备注册，把 authenticatorAttachment 删掉，让浏览器自行选择。</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;authenticatorSelection&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;userVerification&quot;: &quot;required&quot;,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   &quot;residentKey&quot;: &quot;required&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;attestation&quot;: null,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：大多数场景用 &quot;none&quot;（隐私友好）；需要企业背书才考虑 &quot;direct/enterprise&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;attestation&quot;: &quot;none&quot;,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;excludeCredentials&quot;: []</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：防重复注册：填入该用户已注册的所有 credentialId（base64url）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;excludeCredentials&quot;: [</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   { &quot;type&quot;: &quot;public-key&quot;, &quot;id&quot;: &quot;&lt;credId1_base64url&gt;&quot; },</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   { &quot;type&quot;: &quot;public-key&quot;, &quot;id&quot;: &quot;&lt;credId2_base64url&gt;&quot; }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;extensions&quot;: { &quot;extensions&quot;: [] },</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：没用扩展就不要带；有就按键值对给，比如 { &quot;credProps&quot;: true }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // &quot;extensions&quot;: { &quot;credProps&quot;: true },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;timeout&quot;: null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ // 上一行：给出合理超时（毫秒）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;timeout&quot;: 60000</span></span></code></pre></div><hr><h3 id="说明要点-对应上面的改动" tabindex="-1">说明要点（对应上面的改动） <a class="header-anchor" href="#说明要点-对应上面的改动" aria-label="Permalink to &quot;说明要点（对应上面的改动）&quot;">​</a></h3><ul><li><p><strong>challenge</strong>：必须是一次性高熵随机字节（32–64B），并在服务端校验与会话中保存的挑战<strong>严格相等</strong>。</p></li><li><p><strong>rp.id</strong>：与当前页面域后缀匹配；要支持多个子域 → 用 <code>52wukong.com</code>。</p></li><li><p><strong>user.id</strong>：是<strong>字节串</strong>（前端最终是 <code>ArrayBuffer</code>）。SimpleWebAuthn v11+ 也要求 <code>Uint8Array</code>。</p></li><li><p><strong>pubKeyCredParams</strong>：不能为空；至少 <code>alg: -7 (ES256)</code>。</p></li><li><p><strong>authenticatorSelection</strong>：</p><ul><li>只做“平台 Passkey”→ 保留 <code>authenticatorAttachment: &quot;platform&quot;</code>；</li><li>想允许<strong>安全密钥/跨设备</strong>注册 → 删掉该字段（让浏览器任选），<code>residentKey: &quot;required&quot;</code> 仍可保留以确保可发现凭据。</li></ul></li><li><p><strong>attestation</strong>：常用 <code>&quot;none&quot;</code>；企业合规才用 <code>&quot;direct&quot;/&quot;enterprise&quot;</code>。</p></li><li><p><strong>excludeCredentials</strong>：避免同一用户重复注册同一把凭据。</p></li><li><p><strong>extensions</strong>：必须是对象；没用就删。</p></li><li><p><strong>timeout</strong>：建议 60s。</p></li></ul><p>需要的话，我可以把你后端（NestJS + simplewebauthn v11+）的<strong>生成注册 options</strong>函数改成最小可用版本（支持把 <code>userId</code> 编码成 <code>Uint8Array</code>、<code>supportedAlgorithmIDs→pubKeyCredParams</code>、自动填充 <code>excludeCredentials</code>），只贴需要修改的行。</p>`,36)])])}const u=i(l,[["render",e]]);export{c as __pageData,u as default};
