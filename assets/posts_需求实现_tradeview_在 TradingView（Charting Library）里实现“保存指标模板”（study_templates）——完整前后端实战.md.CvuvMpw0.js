import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.oqSrIbQK.js";const g=JSON.parse('{"title":"在 TradingView（Charting Library）里实现“保存指标模板”（study_templates）——完整前后端实战","description":"","frontmatter":{"title":"在 TradingView（Charting Library）里实现“保存指标模板”（study\\\\_templates）——完整前后端实战","date":"2025-09-17T00:00:00.000Z","tags":null},"headers":[],"relativePath":"posts/需求实现/tradeview/在 TradingView（Charting Library）里实现“保存指标模板”（study_templates）——完整前后端实战.md","filePath":"posts/需求实现/tradeview/在 TradingView（Charting Library）里实现“保存指标模板”（study_templates）——完整前后端实战.md","lastUpdated":1758544231000}'),e={name:"posts/需求实现/tradeview/在 TradingView（Charting Library）里实现“保存指标模板”（study_templates）——完整前后端实战.md"};function h(l,s,p,k,r,d){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="整体实现思路" tabindex="-1">整体实现思路 <a class="header-anchor" href="#整体实现思路" aria-label="Permalink to &quot;整体实现思路&quot;">​</a></h2><ul><li><p><strong>目标</strong>：在你的嵌入式 TradingView 图表里启用“指标模板”按钮，支持保存/读取一组指标及其参数。</p></li><li><p><strong>核心</strong>：Charting Library 通过 <strong>REST API</strong> 调你的后端： <code>charts_storage_url/{charts_storage_api_version}/study_templates?client={client_id}&amp;user={user_id}</code>，必须把 <code>charts_storage_api_version</code> 设为 <strong>&quot;1.1&quot;</strong>（study templates 自 1.1 起支持）。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</p></li><li><p><strong>前端</strong>：</p><ol><li>在 Widget 里 <strong>开启 featureset：<code>study_templates</code></strong>，让顶栏出现“指标模板”按钮；</li><li>配置 <code>charts_storage_url</code>、<code>charts_storage_api_version:&quot;1.1&quot;</code>、<code>client_id</code>、<code>user_id</code>。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</li></ol></li><li><p><strong>后端</strong>：实现 4 个端点（列/存/载/删），返回标准 JSON。你也可以用 <strong>save_load_adapter</strong> 走自定义存取流程，但仍需要你有后端。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/?utm_source=chatgpt.com" title="Save and load REST API | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</p></li></ul><hr><h2 id="分步实现过程" tabindex="-1">分步实现过程 <a class="header-anchor" href="#分步实现过程" aria-label="Permalink to &quot;分步实现过程&quot;">​</a></h2><h3 id="步骤一-准备与目录" tabindex="-1">步骤一：准备与目录 <a class="header-anchor" href="#步骤一-准备与目录" aria-label="Permalink to &quot;步骤一：准备与目录&quot;">​</a></h3><ul><li>前端：已集成 <strong>Charting Library</strong>（本地 <code>charting_library/</code> 静态资源）与你的 Datafeed。</li><li>后端：任意 Web 框架皆可，示例用 <strong>Node.js + Express</strong>（也可 FastAPI 等）。</li></ul><blockquote><p>友情提示：<strong>“图表模板（Chart template）”≠“指标模板（Study template）</strong>。前者是配色主题，另一个是指标组合。本教程做的是 <strong>Study Templates</strong>。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</p></blockquote><hr><h3 id="步骤二-前端——开启-ui-指定存储" tabindex="-1">步骤二：前端——开启 UI + 指定存储 <a class="header-anchor" href="#步骤二-前端——开启-ui-指定存储" aria-label="Permalink to &quot;步骤二：前端——开启 UI + 指定存储&quot;">​</a></h3><p>在你创建 <code>widget</code> 的位置，加入以下关键配置（<strong>只看关键字段</strong>）：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- index.html 片段：挂一个容器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tvchart&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:100%;height:600px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/charting_library/charting_library.standalone.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/charting_library/datafeeds/udf/dist/bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> widget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TradingView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">widget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      container: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tvchart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      library_path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/charting_library/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AAPL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      interval: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      datafeed: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Datafeeds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UDFCompatibleDatafeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;https://demo-feed-data.tradingview.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      autosize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ↑ 复杂逻辑：启用“指标模板”按钮，并指向后端存储（必须 1.1）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      enabled_features: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;study_templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示“指标模板”按钮</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      charts_storage_url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:9005&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的后端服务根地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      charts_storage_api_version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Study Templates 自 1.1 起支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      client_id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义：用来分组/隔离</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      user_id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的业务用户 ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOMContentLoaded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, init);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>以上字段的含义与开启方式见 <strong>Featuresets</strong> 与 <strong>Widget Options</strong> 文档；Study Templates 的 REST 端点见 <strong>Saving/Loading</strong> 文档。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</p><hr><h3 id="步骤三-后端——实现-rest-四件套" tabindex="-1">步骤三：后端——实现 REST 四件套 <a class="header-anchor" href="#步骤三-后端——实现-rest-四件套" aria-label="Permalink to &quot;步骤三：后端——实现 REST 四件套&quot;">​</a></h3><p>用 <strong>Express</strong> 起一个极简可跑的存储服务（内存版，便于本地联调；生产请换 DB）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// server.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ← 复杂逻辑：允许前端跨域访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ limit: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1mb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简易内存存储：key = \`\${client}:\${user}:\${name}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列出模板 或 读取单个模板</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/1.1/study_templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ← 复杂逻辑：若带 template 参数则返回单个；否则返回列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (template) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;not found&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ← 复杂逻辑：返回标准 data 对象（name + content）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data: { name: template, content: item.content },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ name: k.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data: list });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存模板</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/1.1/study_templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.body;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name/content required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, { content });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除模板</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/1.1/study_templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9005</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Storage server on http://localhost:9005&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><blockquote><p>REST 端点的路径、查询参数与响应结构，均来自 <strong>Save &amp; load REST API / Indicator template methods</strong> 的官方定义。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/?utm_source=chatgpt.com" title="Save and load REST API | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</p></blockquote><hr><h3 id="步骤四-联调与自测" tabindex="-1">步骤四：联调与自测 <a class="header-anchor" href="#步骤四-联调与自测" aria-label="Permalink to &quot;步骤四：联调与自测&quot;">​</a></h3><ol><li>启动后端：<code>node server.js</code></li><li>打开前端页面 → 顶部会出现 <strong>“指标模板”</strong> 按钮。</li><li>任意加几个指标 → 点击“指标模板 → 保存为…”；随后可在“打开模板”里看到刚保存的项。</li><li>浏览器开发者工具中可看到对 <code>.../1.1/study_templates?...</code> 的网络请求。 （如 URL 出现 <code>undefined</code>，通常是未配置 <code>charts_storage_url</code>/<code>charts_storage_api_version</code>/<code>client_id</code>/<code>user_id</code>，或版本不是 1.1。）(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li></ol><hr><h3 id="步骤五-可选-低层自定义" tabindex="-1">步骤五：（可选）低层自定义 <a class="header-anchor" href="#步骤五-可选-低层自定义" aria-label="Permalink to &quot;步骤五：（可选）低层自定义&quot;">​</a></h3><p>若你要插入鉴权头、改错误处理或自己接管存取流程，可实现 <strong><code>save_load_adapter</code></strong> 并在 Widget 里设置 <code>save_load_adapter: {...}</code>。官方提供接口说明与示例。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-adapter/?utm_source=chatgpt.com" title="API handlers for saving and loading | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</p><hr><h2 id="最简代码示例-可直接跑" tabindex="-1">最简代码示例（可直接跑） <a class="header-anchor" href="#最简代码示例-可直接跑" aria-label="Permalink to &quot;最简代码示例（可直接跑）&quot;">​</a></h2><blockquote><p><strong>前端最小化 HTML</strong>（静态托管即可）与 <strong>后端 Express</strong>（内存存储）。复杂位置均已在上一行加注释。</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- public/index.html --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tvchart&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:100%;height:600px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/charting_library/charting_library.standalone.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/charting_library/datafeeds/udf/dist/bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TradingView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">widget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    container: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tvchart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    library_path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/charting_library/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    symbol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AAPL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    interval: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    datafeed: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Datafeeds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UDFCompatibleDatafeed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;https://demo-feed-data.tradingview.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ← 复杂逻辑：启用“指标模板”并指定 1.1 存储端点与用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enabled_features: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;study_templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    charts_storage_url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:9005&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    charts_storage_api_version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client_id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后端依赖并启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> express</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cors</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server.js</span></span></code></pre></div><hr><h2 id="常见问题与排错" tabindex="-1">常见问题与排错 <a class="header-anchor" href="#常见问题与排错" aria-label="Permalink to &quot;常见问题与排错&quot;">​</a></h2><ul><li><strong>URL 出现 <code>/undefined/.../study_templates?client=undefined&amp;user=undefined</code></strong> ⇒ 没配或配错 <code>charts_storage_url / charts_storage_api_version / client_id / user_id</code>；确认版本为 <strong>&quot;1.1&quot;</strong>。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li><li><strong>看不到“指标模板”按钮</strong> ⇒ 未启用 <code>enabled_features: [&#39;study_templates&#39;]</code>，或使用的不是 Advanced Charts/Charting Library。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</li><li><strong>返回结构不对</strong> ⇒ 对照“Indicator template methods”的请求/响应格式改正字段。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/indicator-template-methods/?utm_source=chatgpt.com" title="Indicator template methods | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li><li><strong>与“图表模板”混淆</strong> ⇒ Chart template 是配色主题，另有 <code>chart_template_storage</code> feature，与 Study template 无关。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</li></ul><hr><h2 id="官方文档与地址-建议收藏" tabindex="-1">官方文档与地址（建议收藏） <a class="header-anchor" href="#官方文档与地址-建议收藏" aria-label="Permalink to &quot;官方文档与地址（建议收藏）&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Saving &amp; Loading 概览（含三种实现方式：REST / Adapter / Low-level）</span></span>
<span class="line"><span>https://www.tradingview.com/charting-library-docs/latest/saving_loading/          # :contentReference[oaicite:12]{index=12}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># REST API 总入口</span></span>
<span class="line"><span>https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/</span></span>
<span class="line"><span># 指标模板（study_templates）四件套</span></span>
<span class="line"><span>https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/indicator-template-methods/   # :contentReference[oaicite:13]{index=13}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Widget 关键参数（含 charts_storage_* 与版本说明）</span></span>
<span class="line"><span>https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/   # :contentReference[oaicite:14]{index=14}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 开启/关闭功能（Featuresets 表）</span></span>
<span class="line"><span>https://www.tradingview.com/charting-library-docs/latest/customization/Featuresets/                                      # :contentReference[oaicite:15]{index=15}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># API Handlers save_load_adapter（自定义存取钩子）</span></span>
<span class="line"><span>https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-adapter/                               # :contentReference[oaicite:16]{index=16}</span></span></code></pre></div><hr><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><ul><li>前端：启用 <code>study_templates</code>，并配置 <code>charts_storage_url + charts_storage_api_version:&quot;1.1&quot; + client_id + user_id</code>。</li><li>后端：按官方 REST 规范实现 <strong>列/存/载/删</strong> 四件套即可跑通。</li><li>若你给我当前前端 <code>widget</code> 选项与后端一条实际响应（去敏），我可以继续帮你“逐行对照文档”把最后的坑补齐。</li></ul><hr><p>title: TradingView 指标模板请求参数是 undefined？一眼看穿并修好 date: 2025-09-17 tags:</p><ul><li>TradingView</li><li>Charting Library</li><li>study_templates description: 你的请求 URL 出现 /charting_library/undefined/undefined/study_templates?client=undefined&amp;user=undefined，说明未正确配置 charts_storage_url / charts_storage_api_version / client_id / user_id，或把 library_path 误当成存储地址。下面给出最小修改片段与自检清单。</li></ul><hr><h2 id="发生了什么-快速诊断" tabindex="-1">发生了什么（快速诊断） <a class="header-anchor" href="#发生了什么-快速诊断" aria-label="Permalink to &quot;发生了什么（快速诊断）&quot;">​</a></h2><p>你看到的 <code>http://localhost:9005/charting_library/undefined/undefined/study_templates?client=undefined&amp;user=undefined</code> 对应的是 <strong>“指标模板 REST API”</strong>，正确格式应为： <code>{charts_storage_url}/{charts_storage_api_version}/study_templates?client={client_id}&amp;user={user_id}</code>。当这些参数没配/配错时，就会出现 <code>undefined</code> 串联到 URL 里。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</p><blockquote><p>结论：<strong>charts_storage_url / charts_storage_api_version / client_id / user_id 未设置</strong>，或把 <strong>library_path</strong>（静态资源路径）误当成了 charts_storage_url（数据存储服务地址）。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</p></blockquote><hr><h2 id="只改需要改的代码-最小补丁" tabindex="-1">只改需要改的代码（最小补丁） <a class="header-anchor" href="#只改需要改的代码-最小补丁" aria-label="Permalink to &quot;只改需要改的代码（最小补丁）&quot;">​</a></h2><p>在你创建 <code>widget</code> 的地方补齐/修正如下选项（不要贴全文件，只替换或新增这些行）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 指标模板需要的存储配置（REST）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enabled_features</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;study_templates&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启模板功能  ← 复杂逻辑：启用相关 UI 与调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charts_storage_url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:9005&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的后端存储服务根地址（别用 library_path）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charts_storage_api_version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本号固定用 1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">client_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your-app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的应用名，用于分组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user-123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你系统里能标识用户的唯一ID</span></span></code></pre></div><p>这些字段的含义与要求见官方文档（<code>study_templates</code> 的增删改查都走这个 REST 前缀）。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</p><hr><h2 id="你的后端要响应哪些接口" tabindex="-1">你的后端要响应哪些接口？ <a class="header-anchor" href="#你的后端要响应哪些接口" aria-label="Permalink to &quot;你的后端要响应哪些接口？&quot;">​</a></h2><p>最少要实现以下 REST 路由（以 <code>charts_storage_url = http://localhost:9005</code> 为例）：</p><ul><li><code>GET /1.1/study_templates?client={client}&amp;user={user}</code> → 返回模板列表</li><li><code>POST /1.1/study_templates?client={client}&amp;user={user}</code> → 保存模板（body: <code>name</code>, <code>content</code>）</li><li><code>GET /1.1/study_templates?client={client}&amp;user={user}&amp;chart={id}&amp;template={name}</code> → 读取模板</li><li><code>DELETE /1.1/study_templates?client={client}&amp;user={user}&amp;template={name}</code> → 删除模板 返回结构与字段见官方“Indicator template methods”。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li></ul><blockquote><p>想省事：官方给了<strong>完整示例后端</strong>（Python + PostgreSQL），可直接跑起来再按需改造。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/?utm_source=chatgpt.com" title="Save and load REST API | Advanced Charts Documentation" target="_blank" rel="noreferrer">GitHub</a>)</p></blockquote><hr><h2 id="自检清单-按顺序排查" tabindex="-1">自检清单（按顺序排查） <a class="header-anchor" href="#自检清单-按顺序排查" aria-label="Permalink to &quot;自检清单（按顺序排查）&quot;">​</a></h2><ol><li><strong>确认没把 <code>library_path</code> 当存储地址</strong>：<code>library_path</code> 只用于加载前端静态资源。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</li><li><strong>前端参数四件套齐全</strong>：<code>charts_storage_url / charts_storage_api_version / client_id / user_id</code>。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/?utm_source=chatgpt.com" title="Saving and loading charts | Advanced Charts Documentation" target="_blank" rel="noreferrer">TradingView</a>)</li><li><strong>已启用模板功能</strong>：<code>enabled_features: [&#39;study_templates&#39;]</code>（视集成需要）。示例与第三方教程均有此配置。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-adapter/?utm_source=chatgpt.com" title="API handlers for saving and loading | Advanced Charts ..." target="_blank" rel="noreferrer">DEV Community</a>)</li><li><strong>后端路由与返回格式正确</strong>：路径、查询串与 JSON 字段符合文档。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li><li>若不想走 REST，也可实现 <strong><code>save_load_adapter</code></strong> 接口由你接管保存/加载逻辑（低层 API）。(<a href="https://www.tradingview.com/charting-library-docs/latest/saving_loading/save-load-rest-api/indicator-template-methods/?utm_source=chatgpt.com" title="Indicator template methods | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li></ol><hr><h2 id="什么时候会仍然-空空如也" tabindex="-1">什么时候会仍然“空空如也”？ <a class="header-anchor" href="#什么时候会仍然-空空如也" aria-label="Permalink to &quot;什么时候会仍然“空空如也”？&quot;">​</a></h2><ul><li>你的后端返回 <code>status: &quot;ok&quot;</code> 但 <code>data</code> 为空（首次使用很正常）。(<a href="https://www.tradingview.com/charting-library-docs/latest/api/interfaces/Charting_Library.ChartingLibraryWidgetOptions/?utm_source=chatgpt.com" title="Interface: ChartingLibraryWidgetOptions | Advanced Charts ..." target="_blank" rel="noreferrer">TradingView</a>)</li><li>请求被浏览器扩展或跨域策略拦截（检查 CORS、代理与拦截器）。</li><li>仍在第三方“嵌入图表”但其侧<strong>未启用 study_templates</strong>。</li></ul><hr><h2 id="需要我继续跟进吗" tabindex="-1">需要我继续跟进吗？ <a class="header-anchor" href="#需要我继续跟进吗" aria-label="Permalink to &quot;需要我继续跟进吗？&quot;">​</a></h2><p>把你当前的 <code>widget</code> 配置片段（仅含上面这些字段）和后端接口返回的一条实际响应（去隐私）发我，我帮你对照文档核对参数与返回格式，定位剩余问题。</p>`,63)])])}const o=i(e,[["render",h]]);export{g as __pageData,o as default};
