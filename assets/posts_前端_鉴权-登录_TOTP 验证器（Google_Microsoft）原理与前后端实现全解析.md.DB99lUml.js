import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.oqSrIbQK.js";const c=JSON.parse('{"title":"TOTP 验证器（Google/Microsoft）原理与前后端实现全解析","description":"","frontmatter":{"title":"TOTP 验证器（Google/Microsoft）原理与前后端实现全解析","date":"2025-09-12T00:00:00.000Z","tags":["2fa","mfa","totp","hotp"]},"headers":[],"relativePath":"posts/前端/鉴权-登录/TOTP 验证器（Google/Microsoft）原理与前后端实现全解析.md","filePath":"posts/前端/鉴权-登录/TOTP 验证器（Google/Microsoft）原理与前后端实现全解析.md","lastUpdated":1758216284000}'),n={name:"posts/前端/鉴权-登录/TOTP 验证器（Google/Microsoft）原理与前后端实现全解析.md"};function h(l,s,r,o,p,k){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;TL;DR&quot;">​</a></h2><ul><li><strong>原理</strong>：Google/Microsoft 等验证器本质上都是 <strong>OATH 标准的 TOTP</strong>（基于时间的一次性密码），源自 RFC 6238（基于 HOTP/RFC 4226 扩展）。默认 <strong>30 秒</strong>一换码，<strong>6 位</strong>数字，使用 <strong>HMAC-SHA1/256/512</strong> 计算。(<a href="https://datatracker.ietf.org/doc/html/rfc6238?utm_source=chatgpt.com" title="RFC 6238 - TOTP: Time-Based One-Time Password Algorithm" target="_blank" rel="noreferrer">IETF Datatracker</a>)</li><li><strong>绑定</strong>：后端生成一个 <strong>Base32 密钥（secret）</strong>，拼成 <code>otpauth://</code> URI 给前端展示为 <strong>二维码</strong>；用户用验证器扫二维码 → 验证器开始本地算码 → 用户回填<strong>一次性验证码</strong>到后端校验 → 校验通过即开启 2FA。<strong>不需要、也不应该再把 secret 发回后端</strong>（后端已经有）。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</li><li><strong>实现</strong>：前端渲染二维码（例如 qrcode），后端用库（Node.js <code>otplib</code>、Python <code>pyotp</code>、Java <code>java-otp</code>）生成 secret、构造 <code>otpauth://</code>、校验验证码并完成持久化与风控。(<a href="https://otplib.yeojz.dev/?utm_source=chatgpt.com" title="Supports HOTP, TOTP and Google Authenticator" target="_blank" rel="noreferrer">Otplib</a>)</li></ul><hr><h2 id="一、常见验证器与差异" tabindex="-1">一、常见验证器与差异 <a class="header-anchor" href="#一、常见验证器与差异" aria-label="Permalink to &quot;一、常见验证器与差异&quot;">​</a></h2><ul><li><strong>Google Authenticator</strong>：标准 TOTP，支持扫描 <code>otpauth://</code>，可选<strong>账号云同步</strong>（注意隐私权衡）。(<a href="https://support.google.com/accounts/answer/1066447?co=GENIE.Platform%3DAndroid&amp;hl=en&amp;utm_source=chatgpt.com" title="Get verification codes with Google Authenticator - Android" target="_blank" rel="noreferrer">Google 帮助</a>)</li><li><strong>Microsoft Authenticator</strong>：同样支持 <strong>OATH TOTP</strong>（也有推送批准与“数字匹配”功能，和 TOTP 是两种形态）。(<a href="https://learn.microsoft.com/en-us/entra/identity/authentication/concept-authentication-authenticator-app?utm_source=chatgpt.com" title="Authentication methods in Microsoft Entra ID" target="_blank" rel="noreferrer">Microsoft Learn</a>)</li></ul><blockquote><p>这两款在“扫描二维码 → 本地计算一次性验证码”的 <strong>TOTP</strong> 场景是<strong>互通</strong>的。</p></blockquote><hr><h2 id="二、工作原理-够用但准确" tabindex="-1">二、工作原理（够用但准确） <a class="header-anchor" href="#二、工作原理-够用但准确" aria-label="Permalink to &quot;二、工作原理（够用但准确）&quot;">​</a></h2><ol><li><strong>HOTP（事件计数）</strong>：<code>code = Truncate(HMAC(K, counter))</code>，每用一次计数+1。(<a href="https://www.ietf.org/rfc/rfc4226.txt?utm_source=chatgpt.com" title="RFC 4226 HOTP: An HMAC-Based One-Time Password ..." target="_blank" rel="noreferrer">IETF</a>)</li><li><strong>TOTP（时间计数）</strong>：把计数器换成时间片 <code>C = floor((now - T0)/period)</code>，常见 <code>period=30s</code>，默认 6 位数字。支持 SHA1/256/512。(<a href="https://datatracker.ietf.org/doc/html/rfc6238?utm_source=chatgpt.com" title="RFC 6238 - TOTP: Time-Based One-Time Password Algorithm" target="_blank" rel="noreferrer">IETF Datatracker</a>)</li><li><strong>密钥分发</strong>：用 <code>otpauth://TYPE/Label?secret=...&amp;issuer=...&amp;period=30&amp;digits=6&amp;algorithm=SHA1</code>，<code>secret</code> 为 <strong>Base32</strong> 编码。验证器扫二维码后就能开始计算。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</li></ol><hr><h2 id="三、你描述的-绑定流程-有个小修正" tabindex="-1">三、你描述的“绑定流程”有个小修正 <a class="header-anchor" href="#三、你描述的-绑定流程-有个小修正" aria-label="Permalink to &quot;三、你描述的“绑定流程”有个小修正&quot;">​</a></h2><blockquote><p>“我把<strong>码和密钥</strong>发给后端完成绑定” —— <strong>不建议</strong>这样做。</p></blockquote><p><strong>推荐安全流程</strong>（后端早已生成并持有 secret）：</p><ol><li><strong>后端</strong>生成 <code>secret(Base32)</code>，构造 <code>otpauth://</code>，返回 <strong>二维码（或明文 secret 供手输）</strong>。</li><li><strong>用户</strong>用验证器扫描 → 验证器本地算出 6 位码。</li><li><strong>用户只回填一次性验证码</strong>（6 位码）到后端；</li><li><strong>后端</strong>用已保存的 secret 验证这 6 位码（允许 ±1 时间片容差），通过则标记已绑定。</li><li>保存与保护 secret（加密存储），并发放<strong>恢复码</strong>、开启风控策略（节流、重试限制等）。 （规范与参数见 RFC/Key URI/OWASP）。(<a href="https://datatracker.ietf.org/doc/html/rfc6238?utm_source=chatgpt.com" title="RFC 6238 - TOTP: Time-Based One-Time Password Algorithm" target="_blank" rel="noreferrer">IETF Datatracker</a>)</li></ol><hr><h2 id="四、接口设计-rest-示例" tabindex="-1">四、接口设计（REST 示例） <a class="header-anchor" href="#四、接口设计-rest-示例" aria-label="Permalink to &quot;四、接口设计（REST 示例）&quot;">​</a></h2><h3 id="_1-获取绑定二维码" tabindex="-1">1）获取绑定二维码 <a class="header-anchor" href="#_1-获取绑定二维码" aria-label="Permalink to &quot;1）获取绑定二维码&quot;">​</a></h3><ul><li><code>POST /api/mfa/setup</code></li><li><strong>入参</strong>：需要登录态（谁要开 2FA）</li><li><strong>返回</strong>：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;setupId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;otpauthUri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;otpauth://totp/YourApp:alice@example.com?secret=JBSW...&amp;issuer=YourApp&amp;period=30&amp;digits=6&amp;algorithm=SHA1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JBSW...&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 仅用于手动输入时显示，可视为敏感信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>服务器同时把 <code>setupId -&gt; secret(加密)</code> 存为“待验证”状态。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</p></blockquote><h3 id="_2-确认绑定" tabindex="-1">2）确认绑定 <a class="header-anchor" href="#_2-确认绑定" aria-label="Permalink to &quot;2）确认绑定&quot;">​</a></h3><ul><li><code>POST /api/mfa/verify</code></li><li><strong>入参</strong>：<code>{ &quot;setupId&quot;: &quot;uuid&quot;, &quot;code&quot;: &quot;123456&quot; }</code></li><li><strong>逻辑</strong>：根据 <code>setupId</code> 取回 secret，用 TOTP 校验 <code>code</code>（窗口 ±1），通过则把 secret 迁移到用户正式配置并标记 2FA 已启用。</li></ul><h3 id="_3-登录二次校验" tabindex="-1">3）登录二次校验 <a class="header-anchor" href="#_3-登录二次校验" aria-label="Permalink to &quot;3）登录二次校验&quot;">​</a></h3><ul><li><code>POST /api/mfa/challenge</code> 获取挑战态</li><li><code>POST /api/mfa/challenge/verify</code> 入参 <code>{code}</code>，通过即颁发登录态/刷新期。</li></ul><hr><h2 id="五、前端实现要点" tabindex="-1">五、前端实现要点 <a class="header-anchor" href="#五、前端实现要点" aria-label="Permalink to &quot;五、前端实现要点&quot;">​</a></h2><ul><li><strong>二维码渲染</strong>：拿到 <code>otpauthUri</code> 后用前端库（如 <code>qrcode</code>）渲染为 <code>&lt;img/&gt;</code>；失败时提供明文 <code>secret</code> 供手输。</li><li><strong>时间同步</strong>：前端不参与计算（验证器自己会算），但要<strong>清晰的错误提示</strong>与<strong>重试节流</strong>。</li><li><strong>隐私</strong>：二维码只在 HTTPS 下展示，避免 DOM 截图/日志泄露。</li></ul><p><strong>示例（React/TS）</strong>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂逻辑：把 otpauth:// 转成 DataURL 并渲染二维码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QRCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;qrcode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> otpauthToDataUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">otpauthUri</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 复杂逻辑：qrcode 库异步生成 Base64 DataURL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QRCode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDataURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(otpauthUri);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="六、后端实现-node-js-typescript-基于-otplib" tabindex="-1">六、后端实现（Node.js / TypeScript，基于 otplib） <a class="header-anchor" href="#六、后端实现-node-js-typescript-基于-otplib" aria-label="Permalink to &quot;六、后端实现（Node.js / TypeScript，基于 otplib）&quot;">​</a></h2><blockquote><p>库说明：<code>otplib</code> 同时支持 HOTP/TOTP，符合 RFC 4226/6238。(<a href="https://www.npmjs.com/package/otplib?utm_source=chatgpt.com" title="otplib" target="_blank" rel="noreferrer">npm</a>)</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂逻辑：生成 Base32 secret、构造 otpauth URI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { authenticator } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;otplib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：全局参数（30 秒步长，±1 个时间片容差）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">authenticator.options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { step: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, window: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMfaSetup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">issuer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YourApp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 复杂逻辑：随机生成 Base32 secret（服务端保存加密后的密文）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateSecret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base32</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 复杂逻辑：构造 otpauth:// URI（二维码内容）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> otpauth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyuri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email, issuer, secret);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { secret, otpauth };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifyMfaCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secretBase32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 复杂逻辑：用同一 secret 校验 6 位码（允许 ±1 时间片）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ token: code, secret: secretBase32 });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="七、后端实现-python-fastapi-基于-pyotp" tabindex="-1">七、后端实现（Python / FastAPI，基于 PyOTP） <a class="header-anchor" href="#七、后端实现-python-fastapi-基于-pyotp" aria-label="Permalink to &quot;七、后端实现（Python / FastAPI，基于 PyOTP）&quot;">​</a></h2><blockquote><p>库说明：<code>pyotp</code> 用于生成与校验 TOTP。(<a href="https://pyauth.github.io/pyotp/?utm_source=chatgpt.com" title="PyOTP documentation - GitHub Pages" target="_blank" rel="noreferrer">pyauth.github.io</a>)</p></blockquote><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复杂逻辑：生成 secret、构造 otpauth、校验验证码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyotp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_mfa_setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, issuer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YourApp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 复杂逻辑：随机 Base32 secret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    secret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyotp.random_base32()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 复杂逻辑：构造 otpauth:// URI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    otpauth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyotp.totp.TOTP(secret).provisioning_uri(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">email, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">issuer_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">issuer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secret, otpauth</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verify_mfa_code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secret_base32: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 复杂逻辑：默认 30s 步长，可设置 valid_window=1 允许前后各一窗</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyotp.TOTP(secret_base32).verify(code, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">valid_window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="八、后端实现-java-spring-boot-基于-java-otp" tabindex="-1">八、后端实现（Java / Spring Boot，基于 <code>java-otp</code>） <a class="header-anchor" href="#八、后端实现-java-spring-boot-基于-java-otp" aria-label="Permalink to &quot;八、后端实现（Java / Spring Boot，基于 \`java-otp\`）&quot;">​</a></h2><blockquote><p><code>com.eatthepath:java-otp</code> 默认 <strong>30s 步长、6 位、HmacSHA1</strong>；如需 Base32 解码可用 <code>commons-codec</code>。(<a href="https://jchambers.github.io/java-otp/apidocs/latest/com/eatthepath/otp/TimeBasedOneTimePasswordGenerator.html?utm_source=chatgpt.com" title="TimeBasedOneTimePasswordG..." target="_blank" rel="noreferrer">JChambers</a>)</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂逻辑：用 java-otp 校验 TOTP（30s 步长，±1 时间片手动容忍）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.eatthepath.otp.TimeBasedOneTimePasswordGenerator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.apache.commons.codec.binary.Base32;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.crypto.spec.SecretKeySpec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.time.Duration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.time.Instant;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.security.Key;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifyTotp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String base32Secret, String code) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 复杂逻辑：Base32 -&gt; key（算法与生成器一致，默认 HmacSHA1）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] keyBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base32Secret);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Key key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretKeySpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyBytes, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HmacSHA1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TimeBasedOneTimePasswordGenerator totp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeBasedOneTimePasswordGenerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 复杂逻辑：当前时间片生成一次性密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateOneTimePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, Instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 复杂逻辑：容忍前后各一窗（手动再算前/后时间片）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateOneTimePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, Instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minusSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateOneTimePassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, Instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plusSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%06d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, current)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%06d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, prev)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%06d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="九、关键安全实践清单" tabindex="-1">九、关键安全实践清单 <a class="header-anchor" href="#九、关键安全实践清单" aria-label="Permalink to &quot;九、关键安全实践清单&quot;">​</a></h2><ul><li><strong>不要把 secret 回传</strong>：后端生成并<strong>安全保存</strong>（建议加密存储，密钥托管/分区权限）。(<a href="https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html?utm_source=chatgpt.com" title="Secrets Management - OWASP Cheat Sheet Series" target="_blank" rel="noreferrer">OWASP Cheat Sheet Series</a>)</li><li><strong>加密传输</strong>：二维码与手输 secret 仅在 <strong>HTTPS</strong> 下展示/传输。</li><li><strong>时间同步</strong>：服务器启用 <strong>NTP</strong>，校验窗口建议 <strong>±1</strong> 时间片。(<a href="https://datatracker.ietf.org/doc/html/rfc6238?utm_source=chatgpt.com" title="RFC 6238 - TOTP: Time-Based One-Time Password Algorithm" target="_blank" rel="noreferrer">IETF Datatracker</a>)</li><li><strong>速率限制</strong>：验证码校验接口加 <strong>节流/黑名单</strong>（参考 OWASP 身份验证与 MFA 指南）。(<a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html?utm_source=chatgpt.com" title="Authentication - OWASP Cheat Sheet Series" target="_blank" rel="noreferrer">OWASP Cheat Sheet Series</a>)</li><li><strong>恢复码</strong>：提供一次性恢复码（建议哈希存储）；丢机/换机时用于解锁与重置。</li><li><strong>最小展示</strong>：二维码只展示一次；需要重扫需重新申请。</li><li><strong>微软差异</strong>：若采用 <strong>推送+数字匹配</strong> 是另一套流程；与 TOTP 并行存在，不同管控策略。(<a href="https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-mfa-number-match?utm_source=chatgpt.com" title="How number matching works in MFA push notifications for ..." target="_blank" rel="noreferrer">Microsoft Learn</a>)</li><li><strong>参数一致</strong>：前后端 period/digits/algorithm 必须一致（Key URI 可显式声明，默认 period=30、digits=6）。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</li></ul><hr><h2 id="十、与官方-标准对齐的-广泛调研-要点" tabindex="-1">十、与官方/标准对齐的“广泛调研”要点 <a class="header-anchor" href="#十、与官方-标准对齐的-广泛调研-要点" aria-label="Permalink to &quot;十、与官方/标准对齐的“广泛调研”要点&quot;">​</a></h2><ul><li><strong>TOTP/HOTP 标准</strong>：RFC 6238（TOTP）、RFC 4226（HOTP）。(<a href="https://datatracker.ietf.org/doc/html/rfc6238?utm_source=chatgpt.com" title="RFC 6238 - TOTP: Time-Based One-Time Password Algorithm" target="_blank" rel="noreferrer">IETF Datatracker</a>)</li><li><strong>Key URI（otpauth://）</strong>：Base32 <code>secret</code>、<code>issuer</code>、<code>digits</code>、<code>period</code> 等参数定义与默认值。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</li><li><strong>Google 文档</strong>：Authenticator 的 2 步验证与离线生成机制；近年新增“可选云同步”。(<a href="https://support.google.com/accounts/answer/1066447?co=GENIE.Platform%3DAndroid&amp;hl=en&amp;utm_source=chatgpt.com" title="Get verification codes with Google Authenticator - Android" target="_blank" rel="noreferrer">Google 帮助</a>)</li><li><strong>Microsoft 文档</strong>：Authenticator 作为软件 <strong>OATH TOTP</strong> 令牌的说明；30s 周期；ASP.NET Core 生成二维码指南。(<a href="https://learn.microsoft.com/en-us/entra/identity/authentication/concept-authentication-authenticator-app?utm_source=chatgpt.com" title="Authentication methods in Microsoft Entra ID" target="_blank" rel="noreferrer">Microsoft Learn</a>)</li><li><strong>实现库</strong>：Node.js <code>otplib</code>、Python <code>pyotp</code>、Java <code>java-otp</code>。(<a href="https://www.npmjs.com/package/otplib?utm_source=chatgpt.com" title="otplib" target="_blank" rel="noreferrer">npm</a>)</li><li><strong>OWASP</strong>：MFA 与机密管理实践。(<a href="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html?utm_source=chatgpt.com" title="Multifactor Authentication - OWASP Cheat Sheet Series" target="_blank" rel="noreferrer">OWASP Cheat Sheet Series</a>)</li></ul><hr><h2 id="十一、最简落地清单-按顺序做就能跑" tabindex="-1">十一、最简落地清单（按顺序做就能跑） <a class="header-anchor" href="#十一、最简落地清单-按顺序做就能跑" aria-label="Permalink to &quot;十一、最简落地清单（按顺序做就能跑）&quot;">​</a></h2><ol><li><strong>后端</strong>：选库（otplib/pyotp/java-otp），实现 <code>createMfaSetup()</code> + <code>verifyMfaCode()</code>；密钥<strong>加密</strong>入库。(<a href="https://www.npmjs.com/package/otplib?utm_source=chatgpt.com" title="otplib" target="_blank" rel="noreferrer">npm</a>)</li><li><strong>前端</strong>：拿 <code>otpauthUri</code> 用 <code>qrcode</code> 渲染二维码，提供“我已扫码，输入 6 位验证码”表单。</li><li><strong>接口</strong>：<code>/mfa/setup</code>（出二维码）→<code>/mfa/verify</code>（校验码，窗口 ±1）；失败次数上限与冷却。</li><li><strong>登录</strong>：若用户已开启 2FA，密码通过后进入 <code>/mfa/challenge</code> 流程再校验一次码。</li><li><strong>运维</strong>：NTP 校时；日志打点（不要记录 secret 与明文码）；WAF/节流；<strong>恢复码</strong>与<strong>紧急解绑</strong>流程。</li></ol><hr><h2 id="十二、faq" tabindex="-1">十二、FAQ <a class="header-anchor" href="#十二、faq" aria-label="Permalink to &quot;十二、FAQ&quot;">​</a></h2><ul><li><p><strong>Q：为什么非要 Base32？</strong> A：因为 <code>otpauth://</code> 约定用 Base32 传递共享密钥，兼容主流验证器（Google 等）。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</p></li><li><p><strong>Q：能不能把 secret 只存在用户手机？</strong> A：TOTP 是<strong>对称</strong>方案，服务端必须持有同一 secret 才能独立计算并比对；若不想让服务器持有密钥，考虑 <strong>FIDO2/Passkeys</strong> 之类的非对称方案。</p></li><li><p><strong>Q：微软“数字匹配”和 TOTP 的关系？</strong> A：数字匹配是<strong>推送验证</strong>的增强，与 TOTP 同在 Authenticator 里，但协议/交互不同；TOTP 仍是 6 位码输入式。(<a href="https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-mfa-number-match?utm_source=chatgpt.com" title="How number matching works in MFA push notifications for ..." target="_blank" rel="noreferrer">Microsoft Learn</a>)</p></li></ul><hr><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li>RFC 6238（TOTP）/ RFC 4226（HOTP）标准文本。(<a href="https://datatracker.ietf.org/doc/html/rfc6238?utm_source=chatgpt.com" title="RFC 6238 - TOTP: Time-Based One-Time Password Algorithm" target="_blank" rel="noreferrer">IETF Datatracker</a>)</li><li>Google：Authenticator 使用与 2 步验证说明。(<a href="https://support.google.com/accounts/answer/1066447?co=GENIE.Platform%3DAndroid&amp;hl=en&amp;utm_source=chatgpt.com" title="Get verification codes with Google Authenticator - Android" target="_blank" rel="noreferrer">Google 帮助</a>)</li><li>Key URI Format（otpauth）。(<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format" title="Key Uri Format · google/google-authenticator Wiki · GitHub" target="_blank" rel="noreferrer">GitHub</a>)</li><li>Microsoft：Authenticator 作为 OATH TOTP 软件令牌、30 秒周期与二维码生成。(<a href="https://learn.microsoft.com/en-us/entra/identity/authentication/concept-authentication-authenticator-app?utm_source=chatgpt.com" title="Authentication methods in Microsoft Entra ID" target="_blank" rel="noreferrer">Microsoft Learn</a>)</li><li>OWASP：MFA/Secrets 管理的安全实践。(<a href="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html?utm_source=chatgpt.com" title="Multifactor Authentication - OWASP Cheat Sheet Series" target="_blank" rel="noreferrer">OWASP Cheat Sheet Series</a>)</li></ul><hr><h3 id="附-最小可用接口返回样例-便于对接" tabindex="-1">附：最小可用接口返回样例（便于对接） <a class="header-anchor" href="#附-最小可用接口返回样例-便于对接" aria-label="Permalink to &quot;附：最小可用接口返回样例（便于对接）&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /api/mfa/setup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;setupId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;7a4f2b3c-8a7e-4d31-9b5e-2c6a1e...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;otpauthUri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;otpauth://totp/YourApp:alice@example.com?secret=KZXW6YTB...&amp;issuer=YourApp&amp;period=30&amp;digits=6&amp;algorithm=SHA1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KZXW6YTB...&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 仅在“显示手动输入”时使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /api/mfa/verify</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabledAt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-09-12T08:00:00Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;recoveryCodesIssued&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>到这一步，你就能用 Google/Microsoft 验证器完成标准 TOTP 绑定与登录校验了。</p></blockquote>`,61)])])}const d=i(n,[["render",h]]);export{c as __pageData,d as default};
