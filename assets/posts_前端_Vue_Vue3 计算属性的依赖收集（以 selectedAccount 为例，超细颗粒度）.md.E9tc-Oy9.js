import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.oqSrIbQK.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/前端/Vue/Vue3 计算属性的依赖收集（以 selectedAccount 为例，超细颗粒度）.md","filePath":"posts/前端/Vue/Vue3 计算属性的依赖收集（以 selectedAccount 为例，超细颗粒度）.md","lastUpdated":1758634537000}'),n={name:"posts/前端/Vue/Vue3 计算属性的依赖收集（以 selectedAccount 为例，超细颗粒度）.md"};function l(h,s,p,d,o,k){return t(),a("div",null,[...s[0]||(s[0]=[e(`<div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Vue3 计算属性的依赖收集（以 selectedAccount 为例，超细颗粒度）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025-09-11</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Vue3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">reactivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">数组依赖</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">对象依赖</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 1. 目标场景回顾</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">我们有一个计算属性：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> selectedAccount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (accountList.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.loginid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedLoginid.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span></code></pre></div><p>问题：当<strong>只修改选中行的其它字段</strong>（如 <code>equity/balance/...</code>）时，为什么 <strong>UI 会更新</strong>，但 <code>computed</code> <strong>不一定重新求值</strong>？</p><hr><h2 id="_2-vue3-依赖收集是-所读即所依" tabindex="-1">2. Vue3 依赖收集是“所读即所依” <a class="header-anchor" href="#_2-vue3-依赖收集是-所读即所依" aria-label="Permalink to &quot;2. Vue3 依赖收集是“所读即所依”&quot;">​</a></h2><p>计算属性在<strong>执行 getter 的那一刻</strong>，会对<strong>被读取的响应式源</strong>建立依赖；<strong>只有这些依赖发生变化</strong>时，计算属性才会被标记为脏，从而在下次读取时重新求值。</p><h3 id="_2-1-常见响应式源与依赖粒度" tabindex="-1">2.1 常见响应式源与依赖粒度 <a class="header-anchor" href="#_2-1-常见响应式源与依赖粒度" aria-label="Permalink to &quot;2.1 常见响应式源与依赖粒度&quot;">​</a></h3><ul><li><p><strong><code>ref</code></strong>：访问 <code>.value</code> 建立依赖（例如 <code>selectedLoginid.value</code>）。</p></li><li><p><strong><code>reactive</code>/<code>ref</code> 包裹的对象</strong>：访问 <strong>某个属性</strong> 时，以“对象 + 属性键”为依赖（例如读取 <code>row.loginid</code>）。</p></li><li><p><strong>数组（<code>reactive</code>/<code>ref</code> 的数组）</strong>：</p><ul><li>访问 <strong><code>length</code></strong> 会对 <code>length</code> 建依赖（影响 push/pop 等修改）。</li><li><strong>按索引读取</strong>（<code>arr[i]</code>）会对该 <strong>索引键</strong> 建依赖。</li><li><strong>遍历/查找类方法</strong>（如 <code>for...of</code>、<code>map</code>、<code>find</code> 等）通常会对<strong>迭代键</strong>和<strong>相关索引</strong>建依赖；在遍历过程中，若读取了元素对象的某些属性，也会对这些<strong>属性键</strong>建立依赖（见 2.3）。</li></ul></li><li><p><strong>Map/Set 等集合</strong>：遍历时依赖“迭代键”（内部用 <code>ITERATE_KEY</code> 追踪）。</p></li></ul><blockquote><p>要点：<strong>只对“读取过”的键建立依赖</strong>；没读到的字段<strong>不会</strong>成为依赖。</p></blockquote><h3 id="_2-2-selectedaccount-的依赖具体有哪些" tabindex="-1">2.2 <code>selectedAccount</code> 的依赖具体有哪些？ <a class="header-anchor" href="#_2-2-selectedaccount-的依赖具体有哪些" aria-label="Permalink to &quot;2.2 \`selectedAccount\` 的依赖具体有哪些？&quot;">​</a></h3><p>执行 <code>find()</code> 的过程中，会读取：</p><ol><li><code>selectedLoginid.value</code> —— 对这个 <code>ref</code> 的 <code>.value</code> 建依赖；</li><li><code>accountList.value</code> —— 对 <strong>数组引用/长度/迭代</strong> 建依赖；</li><li><code>a.loginid</code> —— 对<strong>参与比较的那些元素</strong>的 <code>loginid</code> 属性建依赖（直到找到命中的那一个或遍历结束）。</li></ol><blockquote><p>注意：此 getter <strong>没有读取</strong> <code>a.equity/balance/...</code>，所以<strong>不会</strong>对这些字段建依赖。</p></blockquote><h3 id="_2-3-读取时才变成响应式-的懒代理" tabindex="-1">2.3 “读取时才变成响应式”的懒代理 <a class="header-anchor" href="#_2-3-读取时才变成响应式-的懒代理" aria-label="Permalink to &quot;2.3 “读取时才变成响应式”的懒代理&quot;">​</a></h3><p>当 <code>accountList.value</code> 是一个响应式数组，<strong>访问数组元素 <code>a = arr[i]</code> 时</strong>，Vue 会对该元素对象做<strong>懒代理</strong>（即在 <code>get</code> 拦截时把它包装为响应式代理）。此后读取 <code>a.loginid</code> 就会被<strong>精确追踪</strong>为“元素对象的 <code>loginid</code> 属性依赖”。</p><hr><h2 id="_3-为什么只改-equity-也能让-ui-更新" tabindex="-1">3. 为什么只改 <code>equity</code> 也能让 UI 更新？ <a class="header-anchor" href="#_3-为什么只改-equity-也能让-ui-更新" aria-label="Permalink to &quot;3. 为什么只改 \`equity\` 也能让 UI 更新？&quot;">​</a></h2><ul><li><p>模板或其它计算/侦听，在渲染时<strong>单独读取</strong>了 <code>selectedAccount.value?.equity</code>，因而对“<strong>选中行对象的 <code>equity</code> 属性</strong>”建立了依赖。</p></li><li><p>当你执行：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原地修改选中行的对象字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedRow.equity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newEquity;</span></span></code></pre></div><p>由于这是 <strong>被依赖的属性本身</strong>，视图会<strong>立即更新</strong>。</p></li><li><p>但 <code>selectedAccount</code> 这个 <strong>computed</strong> 的 getter <strong>并没有读取 <code>equity</code></strong>，所以它<strong>不需要</strong>重新求值；返回值（选中行对象的<strong>同一引用</strong>）保持不变，模板依旧能看到它的内部字段变化。</p></li></ul><blockquote><p>结论：<strong>UI 更新</strong>是因为模板对 <code>equity</code> 建立了依赖；<strong>computed 不重算</strong>是因为 getter 没依赖 <code>equity</code>。</p></blockquote><hr><h2 id="_4-哪些变更会让-selectedaccount-重新求值" tabindex="-1">4. 哪些变更会让 <code>selectedAccount</code> 重新求值？ <a class="header-anchor" href="#_4-哪些变更会让-selectedaccount-重新求值" aria-label="Permalink to &quot;4. 哪些变更会让 \`selectedAccount\` 重新求值？&quot;">​</a></h2><ul><li>✅ <code>selectedLoginid.value</code> 改变（切换了要找的 id）。</li><li>✅ <code>accountList.value</code> <strong>换了新引用</strong>（例如 <code>accountList.value = [...accountList.value]</code>）。</li><li>✅ 数组结构变化影响到依赖（如 <code>length</code> 变化、迭代相关变更）。</li><li>✅ 参与比较的元素的 <strong><code>loginid</code> 字段</strong>改变，或该元素对象被<strong>整体替换为新对象</strong>。</li><li>❌ 只改<strong>匹配元素的其它字段</strong>（<code>equity/balance/...</code>），且<strong>不换数组引用</strong> —— <strong>不会</strong>触发 <code>selectedAccount</code> 重算，但模板会更新相应单元格。</li></ul><hr><h2 id="_5-最简代码验证-逐步演示" tabindex="-1">5. 最简代码验证（逐步演示） <a class="header-anchor" href="#_5-最简代码验证-逐步演示" aria-label="Permalink to &quot;5. 最简代码验证（逐步演示）&quot;">​</a></h2><h3 id="_5-1-基础-只改其它字段-computed-不重算但-ui-会变" tabindex="-1">5.1 基础：只改其它字段，computed 不重算但 UI 会变 <a class="header-anchor" href="#_5-1-基础-只改其它字段-computed-不重算但-ui-会变" aria-label="Permalink to &quot;5.1 基础：只改其它字段，computed 不重算但 UI 会变&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> selectedLoginid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> accountList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { loginid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, equity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { loginid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, equity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> selectedAccount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    accountList.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.loginid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedLoginid.value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 模板读取 selectedAccount?.equity → 对 “a1.equity” 建依赖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改 equity（不换数组引用），UI 会更新；computed 不一定重算（引用不变）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accountList.value[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].equity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_5-2-换数组引用触发表格类重算-排序-分组等" tabindex="-1">5.2 换数组引用触发表格类重算（排序/分组等） <a class="header-anchor" href="#_5-2-换数组引用触发表格类重算-排序-分组等" aria-label="Permalink to &quot;5.2 换数组引用触发表格类重算（排序/分组等）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在复杂逻辑上一行加注释：原地改字段后，若还需触发表格模型重算，再“换数组引用”</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accountList.value[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].equity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accountList.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accountList.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="_5-3-替换对象会让-computed-重算-因为命中的那一项换了引用" tabindex="-1">5.3 替换对象会让 computed 重算（因为命中的那一项换了引用） <a class="header-anchor" href="#_5-3-替换对象会让-computed-重算-因为命中的那一项换了引用" aria-label="Permalink to &quot;5.3 替换对象会让 computed 重算（因为命中的那一项换了引用）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在复杂逻辑上一行加注释：替换命中元素对象 → getter 要重新 .find()，computed 重算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accountList.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.loginid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accountList.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { loginid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, equity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h3 id="_5-4-仅切换-loginid-一定重算" tabindex="-1">5.4 仅切换 loginid，一定重算 <a class="header-anchor" href="#_5-4-仅切换-loginid-一定重算" aria-label="Permalink to &quot;5.4 仅切换 loginid，一定重算&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在复杂逻辑上一行加注释：selectedLoginid 变化是显式依赖，computed 一定重算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedLoginid.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><hr><h2 id="_6-数组与对象的依赖-表格" tabindex="-1">6. 数组与对象的依赖“表格” <a class="header-anchor" href="#_6-数组与对象的依赖-表格" aria-label="Permalink to &quot;6. 数组与对象的依赖“表格”&quot;">​</a></h2><table tabindex="0"><thead><tr><th>读取操作（在 getter 内）</th><th>建立的依赖键</th><th>哪些更新会触发重算</th></tr></thead><tbody><tr><td><code>selectedLoginid.value</code></td><td>该 <code>ref</code> 的 <code>value</code></td><td>任何对 <code>selectedLoginid.value</code> 的修改</td></tr><tr><td><code>accountList.value</code>（拿到数组引用）</td><td>数组 <code>value</code> 引用、<code>length</code>/迭代键</td><td>换数组引用、<code>push/pop/splice</code>、长度变更</td></tr><tr><td><code>accountList.value[i]</code></td><td>数组索引 <code>i</code></td><td>替换该索引处元素、数组结构影响该索引</td></tr><tr><td><code>a.loginid</code>（查找时访问的元素属性）</td><td><strong>元素对象的 <code>loginid</code> 属性</strong></td><td>改变该属性、或把该元素整体替换为新对象</td></tr><tr><td>未读取的字段（如 <code>a.equity</code> / <code>a.balance</code>）</td><td><strong>不会</strong>建立依赖</td><td>改这些字段<strong>不会</strong>让 computed 重算</td></tr></tbody></table><blockquote><p>模板/其它 computed/侦听如果单独读取了 <code>a.equity</code>，它们<strong>会</strong>对 <code>equity</code> 建依赖，从而在你改 <code>equity</code> 时更新 UI。</p></blockquote><hr><h2 id="_7-实战建议-与表格场景结合" tabindex="-1">7. 实战建议（与表格场景结合） <a class="header-anchor" href="#_7-实战建议-与表格场景结合" aria-label="Permalink to &quot;7. 实战建议（与表格场景结合）&quot;">​</a></h2><ol><li><p><strong>selectedAccount 只做“指向哪一行”</strong>：通过 <code>loginid + accountList</code> 定位对象引用即可，不要在 getter 里读取无关字段，避免不必要重算。</p></li><li><p><strong>更新选中行的业务字段</strong>（如盈亏、净值）：</p><ul><li><p>只需 <strong>原地改对象字段</strong>，UI 就会变。</p></li><li><p>若还需要<strong>触发表格模型重算</strong>（排序/分组/聚合），在修改后<strong>再换一次数组引用</strong>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在复杂逻辑上一行加注释：需要触发表格重算时再换数组引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(accountList.value[idx], patch);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accountList.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accountList.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ul></li><li><p><strong>避免错误写法</strong>：不要让 <code>selectedAccount</code> 变成可写的 <code>ref</code> 并随行情去 <code>Object.assign(selectedAccount.value, ...)</code>；保持它是<strong>纯派生</strong>，杜绝引用抖动。</p></li><li><p><strong>高频更新时合批</strong>：把多次行情更新合并到一帧内，再一次性换数组引用，减小重算与渲染负担。</p></li></ol><hr><h2 id="_8-一句话总结" tabindex="-1">8. 一句话总结 <a class="header-anchor" href="#_8-一句话总结" aria-label="Permalink to &quot;8. 一句话总结&quot;">​</a></h2><ul><li>computed <strong>只会</strong>对 getter <strong>读到的键</strong>建立依赖；</li><li>模板单独读取的字段，会建立<strong>它自己的依赖</strong>；</li><li><strong>只改选中行的其它字段</strong> ⇒ UI 更新，但 <code>selectedAccount</code> 不一定重算；</li><li><strong>需要表格重排/聚合</strong> ⇒ 修改后再“<strong>换数组引用</strong>”。</li></ul><p>如果你愿意，把你当前的 <code>selectedAccount</code> 与“盈亏更新”两段代码贴上来；我只改<strong>必要的几行</strong>，并在复杂逻辑上一行加注释，帮你做到“UI 跟随变、computed 不抖动、表格按需重算”。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>::contentReference[oaicite:0]{index=0}</span></span></code></pre></div>`,43)])])}const g=i(n,[["render",l]]);export{r as __pageData,g as default};
