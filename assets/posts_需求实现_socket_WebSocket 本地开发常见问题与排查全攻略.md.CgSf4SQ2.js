import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.oqSrIbQK.js";const d=JSON.parse('{"title":"WebSocket 本地开发常见问题与排查全攻略","description":"","frontmatter":{"title":"WebSocket 本地开发常见问题与排查全攻略","date":"2025-09-23T00:00:00.000Z","tags":"\\\\[Hexo, WebSocket, TLS, Nginx, 本地开发, 教程]"},"headers":[],"relativePath":"posts/需求实现/socket/WebSocket 本地开发常见问题与排查全攻略.md","filePath":"posts/需求实现/socket/WebSocket 本地开发常见问题与排查全攻略.md","lastUpdated":1759031800000}'),t={name:"posts/需求实现/socket/WebSocket 本地开发常见问题与排查全攻略.md"};function n(h,s,p,o,r,k){return e(),a("div",null,[...s[0]||(s[0]=[l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在本地开发 Web 应用时，经常会遇到 <strong>WebSocket (ws / wss)</strong> 连接失败的问题，比如浏览器控制台显示 “Pending” 或 “Error 1006”。 本文整理了常见原因、调试工具、协议关系，以及证书在其中的作用，帮助你快速定位和解决问题。</p><hr><h2 id="协议关系总览" tabindex="-1">协议关系总览 <a class="header-anchor" href="#协议关系总览" aria-label="Permalink to &quot;协议关系总览&quot;">​</a></h2><h3 id="http-与-websocket" tabindex="-1">HTTP 与 WebSocket <a class="header-anchor" href="#http-与-websocket" aria-label="Permalink to &quot;HTTP 与 WebSocket&quot;">​</a></h3><ul><li><strong>HTTP</strong>：基于请求-响应模型，短连接。</li><li><strong>WebSocket</strong>：基于 TCP 的全双工长连接，通常通过 HTTP <strong>Upgrade</strong> 握手建立。</li></ul><h3 id="明文-vs-加密" tabindex="-1">明文 vs 加密 <a class="header-anchor" href="#明文-vs-加密" aria-label="Permalink to &quot;明文 vs 加密&quot;">​</a></h3><ul><li><code>ws://</code> —— 明文 WebSocket，基于 TCP/80。</li><li><code>wss://</code> —— 加密 WebSocket，基于 TLS/443，相当于 <code>https://</code>。</li></ul><h3 id="混合内容限制" tabindex="-1">混合内容限制 <a class="header-anchor" href="#混合内容限制" aria-label="Permalink to &quot;混合内容限制&quot;">​</a></h3><ul><li><strong>HTTPS 页面</strong> → 只能连 <strong>wss://</strong>，不能连 ws://（被浏览器拦截）。</li><li><strong>HTTP 页面</strong> → 可以连 ws:// 也可以连 wss://。</li></ul><blockquote><p>⚠️ 本地常见问题：<code>http://localhost:3000</code> 去连 <code>wss://example.com</code> 是允许的，但 <code>https://example.com</code> 去连 <code>ws://localhost:3000</code> 会被拦截。</p></blockquote><hr><h2 id="证书在其中的作用" tabindex="-1">证书在其中的作用 <a class="header-anchor" href="#证书在其中的作用" aria-label="Permalink to &quot;证书在其中的作用&quot;">​</a></h2><h3 id="tls-证书校验流程" tabindex="-1">TLS 证书校验流程 <a class="header-anchor" href="#tls-证书校验流程" aria-label="Permalink to &quot;TLS 证书校验流程&quot;">​</a></h3><ol><li><p><strong>浏览器发起 TLS 握手</strong>，带上 <code>SNI</code>（Server Name Indication）。</p></li><li><p><strong>服务器返回证书</strong>。</p></li><li><p>浏览器校验证书链：</p><ul><li>域名是否包含在证书的 <strong>Subject Alternative Name (SAN)</strong>。</li><li>证书是否过期。</li><li>证书是否由受信任 CA 签发。</li><li>链是否完整（是否缺中间证书）。</li></ul></li></ol><h3 id="常见报错" tabindex="-1">常见报错 <a class="header-anchor" href="#常见报错" aria-label="Permalink to &quot;常见报错&quot;">​</a></h3><ul><li><code>Hostname/IP does not match certificate&#39;s altnames</code> → 证书里没有目标域名。</li><li><code>NET::ERR_CERT_AUTHORITY_INVALID</code> → 自签证书未被信任。</li><li><code>NET::ERR_CERT_DATE_INVALID</code> → 证书过期或本地时间不对。</li><li><code>526 Invalid SSL certificate</code>（Cloudflare） → 源站证书有问题。</li></ul><hr><h2 id="websocket-连接失败的常见原因" tabindex="-1">WebSocket 连接失败的常见原因 <a class="header-anchor" href="#websocket-连接失败的常见原因" aria-label="Permalink to &quot;WebSocket 连接失败的常见原因&quot;">​</a></h2><ol><li><p><strong>证书域名不匹配</strong>（最常见）。</p><ul><li>例如访问 <code>wss://test.example.com</code>，但证书只包含 <code>www.example.com</code>。</li></ul></li><li><p><strong>Origin 白名单未放行</strong>。</p><ul><li>服务端拦截了来自 <code>http://localhost:3000</code> 的请求。</li></ul></li><li><p><strong>Nginx/CDN 未配置 WS 升级</strong>。</p><ul><li>缺少 <code>Upgrade</code>、<code>Connection</code> 头，握手失败。</li></ul></li><li><p><strong>网络代理/防火墙拦截</strong>。</p><ul><li>公司网络或系统代理阻断了 wss 流量。</li></ul></li><li><p><strong>JWT/鉴权失败</strong>。</p><ul><li>token 过期或签发时间与服务器时间偏差大。</li></ul></li></ol><hr><h2 id="nginx-websocket-必备配置" tabindex="-1">Nginx WebSocket 必备配置 <a class="header-anchor" href="#nginx-websocket-必备配置" aria-label="Permalink to &quot;Nginx WebSocket 必备配置&quot;">​</a></h2><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复杂逻辑：升级头透传</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">http_upgrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $connection_upgrade {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upgrade;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> close;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /etc/nginx/ssl/example.com/fullchain.pem;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/ssl/example.com/privkey.pem;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /ws/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_http_version </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Upgrade $http_upgrade;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Connection $connection_upgrade;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_read_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://your_ws_upstream;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="测试-websocket-的常用工具" tabindex="-1">测试 WebSocket 的常用工具 <a class="header-anchor" href="#测试-websocket-的常用工具" aria-label="Permalink to &quot;测试 WebSocket 的常用工具&quot;">​</a></h2><h3 id="_1-wscat-最常用" tabindex="-1">1. wscat（最常用） <a class="header-anchor" href="#_1-wscat-最常用" aria-label="Permalink to &quot;1. wscat（最常用）&quot;">​</a></h3><ul><li><p>安装：<code>npm install -g wscat</code></p></li><li><p>使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wscat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;wss://example.com/ws?token=xxx&quot;</span></span></code></pre></div></li><li><p>功能：交互式 CLI，可以手动发消息、收消息。</p></li></ul><h3 id="_2-websocat" tabindex="-1">2. websocat <a class="header-anchor" href="#_2-websocat" aria-label="Permalink to &quot;2. websocat&quot;">​</a></h3><ul><li><p>安装：<code>brew install websocat</code> (macOS) 或下载二进制。</p></li><li><p>使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">websocat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wss://example.com/ws</span></span></code></pre></div></li><li><p>特点：更轻量，支持管道操作，可以脚本化测试。</p></li></ul><h3 id="_3-curl-只能测试握手" tabindex="-1">3. curl（只能测试握手） <a class="header-anchor" href="#_3-curl-只能测试握手" aria-label="Permalink to &quot;3. curl（只能测试握手）&quot;">​</a></h3><ul><li><p>用于确认 <code>101 Switching Protocols</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Connection: Upgrade&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Upgrade: websocket&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Host: example.com&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Origin: http://localhost:3000&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     https://example.com/ws</span></span></code></pre></div></li><li><p>缺点：不能维持 WebSocket 会话。</p></li></ul><h3 id="_4-浏览器-devtools" tabindex="-1">4. 浏览器 DevTools <a class="header-anchor" href="#_4-浏览器-devtools" aria-label="Permalink to &quot;4. 浏览器 DevTools&quot;">​</a></h3><ul><li><p>在 <strong>Network → WS</strong> 里查看：</p><ul><li><code>101 Switching Protocols</code> 是否成功。</li><li><code>Close Code</code> 是否 1006/1008。</li><li><code>Security</code> 看证书是否正常。</li></ul></li></ul><hr><h2 id="快速排查步骤" tabindex="-1">快速排查步骤 <a class="header-anchor" href="#快速排查步骤" aria-label="Permalink to &quot;快速排查步骤&quot;">​</a></h2><ol><li><p><strong>浏览器 Network</strong>：看是否 <code>101</code> 握手成功。</p></li><li><p><strong>命令行 wscat</strong>：排除前端代码影响。</p></li><li><p><strong>OpenSSL</strong>：检查证书链。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s_client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -servername</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -subject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -issuer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dates</span></span></code></pre></div></li><li><p><strong>服务端日志</strong>：看握手是否被拒绝（403/400/404）。</p></li></ol><hr><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>本地 http 页面连远端 wss 是允许的</strong>，问题大多出在证书或服务端配置。</li><li>证书必须包含访问的域名，否则浏览器直接拒绝。</li><li>推荐用 <strong>wscat/websocat</strong> 先测通道，再结合 DevTools 和 OpenSSL 确认问题。</li><li>若前面有 Nginx/CDN，一定要加上 <code>Upgrade/Connection</code> 头。</li></ul><hr><p>要不要我再写一篇 <strong>“证书校验与 SAN 配置专门篇”</strong>，里面详细讲 <strong>多域名证书、泛域名证书、SNI 配置</strong> 这些实战？</p>`,41)])])}const g=i(t,[["render",n]]);export{d as __pageData,g as default};
