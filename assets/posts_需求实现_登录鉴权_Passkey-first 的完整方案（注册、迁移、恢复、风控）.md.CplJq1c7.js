import{_ as t,c as o,o as r,ag as e}from"./chunks/framework.oqSrIbQK.js";const u=JSON.parse('{"title":"别再逼用户记密码：Passkey-first 的完整方案（注册、迁移、恢复、风控）","description":"","frontmatter":{"title":"别再逼用户记密码：Passkey-first 的完整方案（注册、迁移、恢复、风控）","date":"2025-09-17T00:00:00.000Z","tags":["Passkeys","WebAuthn","无密码登录","简化登录","身份认证"]},"headers":[],"relativePath":"posts/需求实现/登录鉴权/Passkey-first 的完整方案（注册、迁移、恢复、风控）.md","filePath":"posts/需求实现/登录鉴权/Passkey-first 的完整方案（注册、迁移、恢复、风控）.md","lastUpdated":1758163069000}'),n={name:"posts/需求实现/登录鉴权/Passkey-first 的完整方案（注册、迁移、恢复、风控）.md"};function i(a,s,l,g,d,c){return r(),o("div",null,[...s[0]||(s[0]=[e('<h2 id="结论-tl-dr" tabindex="-1">结论（TL;DR） <a class="header-anchor" href="#结论-tl-dr" aria-label="Permalink to &quot;结论（TL;DR）&quot;">​</a></h2><p>完全可以做到<strong>无需记密码</strong>：</p><ul><li><strong>新用户</strong>直接走 <strong>Passkey-first</strong> 注册（JIT 建号 + 可发现凭据），之后<strong>一直用通行密钥登录</strong>；</li><li><strong>老用户</strong>用一次<strong>无密码迁移</strong>（邮件魔法链接/短信一次码/现场已登录会话）来<strong>绑定通行密钥</strong>，以后也不需要密码。</li><li>密码只作为<strong>备用恢复方式</strong>（可选），而不是每天都要输入的“主入口”。</li></ul><h2 id="两类用户路径-推荐落地" tabindex="-1">两类用户路径（推荐落地） <a class="header-anchor" href="#两类用户路径-推荐落地" aria-label="Permalink to &quot;两类用户路径（推荐落地）&quot;">​</a></h2><h3 id="a-新用户-passkey-first-彻底无密码" tabindex="-1">A. 新用户：Passkey-first（彻底无密码） <a class="header-anchor" href="#a-新用户-passkey-first-彻底无密码" aria-label="Permalink to &quot;A. 新用户：Passkey-first（彻底无密码）&quot;">​</a></h3><ol><li>登录页主按钮：<strong>「继续使用通行密钥」</strong>（启用 Conditional UI/Autofill）。</li><li>后端 <code>generateRegistrationOptions</code>：<code>residentKey:&#39;required&#39;</code>，<code>requireUserVerification:true</code>，JIT 创建 <strong>pending</strong> 账户。</li><li><code>verifyRegistrationResponse</code> 成功后：签发登录态 → 引导补资料/绑定手机号或邮箱。</li><li>以后登录：<strong>generateAuthenticationOptions（不传 allowCredentials）</strong> 即可<strong>无用户名直登</strong>。</li></ol><blockquote><p>这样用户<strong>从未设置过密码</strong>，也无需记忆。</p></blockquote><h3 id="b-老用户-无密码迁移-→-绑定-passkey" tabindex="-1">B. 老用户：无密码迁移 → 绑定 Passkey <a class="header-anchor" href="#b-老用户-无密码迁移-→-绑定-passkey" aria-label="Permalink to &quot;B. 老用户：无密码迁移 → 绑定 Passkey&quot;">​</a></h3><p>给用户三个等价入口，任选其一完成<strong>一次性绑定</strong>：</p><ul><li><strong>魔法链接</strong>：输入邮箱 → 收链接 → 点击即登录 → 立刻提示「一键绑定通行密钥」。</li><li><strong>一次性验证码</strong>：输入邮箱/手机号 → 填 6 位码 → 立刻提示绑定。</li><li><strong>已登录会话</strong>：若用户已在某设备登录，直接在<strong>安全设置</strong>页提示「添加通行密钥」。</li></ul><p>绑定完成后，该账号<strong>后续登录都走 passkey</strong>，无需再输入密码。</p><h2 id="账号恢复与-丢钥匙-预案-关键-否则体验会反噬" tabindex="-1">账号恢复与“丢钥匙”预案（关键，否则体验会反噬） <a class="header-anchor" href="#账号恢复与-丢钥匙-预案-关键-否则体验会反噬" aria-label="Permalink to &quot;账号恢复与“丢钥匙”预案（关键，否则体验会反噬）&quot;">​</a></h2><ul><li><p><strong>要求首绑就注册两把钥匙</strong>（例如手机 + 电脑）。</p></li><li><p><strong>允许多把通行密钥</strong>（硬件 Key、手机、电脑各一），并提供命名/吊销。</p></li><li><p><strong>备用通道</strong>（只用于恢复，不作为日常登录）：</p><ul><li>魔法链接 / 一次性验证码；</li><li><strong>恢复码</strong>（一次性使用，生成后提示妥善保管）；</li><li><strong>管理员人工恢复</strong>（适用于员工场景，配风控核验）。</li></ul></li><li><p><strong>敏感操作“升级验证”</strong>：资金/权限变更时强制使用 <strong>passkey + 已登录会话</strong> 或二次生物验证。</p></li></ul><h2 id="你的后端-nestjs-simplewebauthn-最小改造清单" tabindex="-1">你的后端（NestJS + simplewebauthn）最小改造清单 <a class="header-anchor" href="#你的后端-nestjs-simplewebauthn-最小改造清单" aria-label="Permalink to &quot;你的后端（NestJS + simplewebauthn）最小改造清单&quot;">​</a></h2><blockquote><p>遵循你的偏好：只列<strong>关键改动点</strong>，不贴整段代码。</p></blockquote><ul><li><p><strong>注册/登录都要求 UV（强用户验证）</strong> 在 <code>verifyRegistrationResponse</code> 与 <code>verifyAuthenticationResponse</code> 里将 <code>requireUserVerification: true</code>（你当前是 <code>false</code>）。 <em>// 复杂逻辑：确保是“人手持有设备”在操作，符合 passkey 设计初衷</em></p></li><li><p><strong>保留你现有的 JIT 建号</strong>（你已经实现 ✅） 首次注册直接创建 pending 员工 → 验证成功即激活/赋最小权限。</p></li><li><p><strong>新增「无密码迁移」两条辅助路由</strong></p><ul><li><code>POST /auth/magic-link/start</code>：写入一次性 token（Redis TTL），发邮件链接。</li><li><code>GET /auth/magic-link/callback</code>：消费 token → 创建会话 → 立刻发 <code>generateRegistrationOptions</code> 让用户绑定通行密钥。 <em>// 复杂逻辑：仅首次绑定使用；成功后引导多设备再绑定一把</em></li></ul></li><li><p><strong>允许一个账号绑定多把凭据</strong> 你的 <code>passkey_credentials</code> 表已支持多行（同 <code>subjectId</code> 多 <code>credentialId</code>）。补充：昵称、创建时间、最后使用时间、来源设备。</p></li><li><p><strong>风控/限流</strong> 已有 Redis 限流基础上，给魔法链接/验证码也做：<strong>同邮箱 5 次/小时</strong>、<strong>同 IP 20 次/小时</strong>。</p></li><li><p><strong>设备唯一</strong>（若你业务需要） 不把“设备唯一”当身份学前置条件；而是绑定成功后在<strong>业务授权层</strong>做限制（例如一机一号白名单），避免与 passkey 的“跨设备同步”理念冲突。</p></li></ul><h2 id="前端-ux-要点-极大影响转化" tabindex="-1">前端 UX 要点（极大影响转化） <a class="header-anchor" href="#前端-ux-要点-极大影响转化" aria-label="Permalink to &quot;前端 UX 要点（极大影响转化）&quot;">​</a></h2><ul><li>登录页优先级：<strong>「继续使用通行密钥」</strong>（主按钮） 下面一行较轻样式提供「其他方式」→ 魔法链接 / 一次性码。</li><li>启用 <strong>Conditional UI/Autofill</strong>（浏览器/系统会自动弹 Passkey 选择器）。</li><li>首次绑定成功后，显式提示**「再添加一把通行密钥以防手机丢失」**。</li><li>设置页提供**「查看/重命名/移除」**通行密钥列表。</li></ul><h2 id="方案权衡与常见问答" tabindex="-1">方案权衡与常见问答 <a class="header-anchor" href="#方案权衡与常见问答" aria-label="Permalink to &quot;方案权衡与常见问答&quot;">​</a></h2><ul><li><strong>必须先注册吗？</strong> 是。至少要有<strong>一次</strong>把该账户的<strong>公钥</strong>写入你库里，后续才能凭签名登录。</li><li><strong>可以不设密码吗？</strong> 完全可以。密码变成<strong>备用恢复手段</strong>（可选），而非日常入口。</li><li><strong>没有 Passkey 的设备怎么登录？</strong> 魔法链接/一次性码仅作为<strong>救场</strong>；登录后立刻提示<strong>绑定</strong>。</li><li><strong>安全性会不会下降？</strong> 不会——前提是<strong>日常登录只走 passkey</strong>，而恢复通道加<strong>限流/风控</strong>，并鼓励<strong>多设备多把钥匙</strong>。</li></ul><h2 id="一页落地清单-供你排期" tabindex="-1">一页落地清单（供你排期） <a class="header-anchor" href="#一页落地清单-供你排期" aria-label="Permalink to &quot;一页落地清单（供你排期）&quot;">​</a></h2><ol><li>登录页改版：主入口 <strong>Passkey</strong>，次入口 <strong>魔法链接/一次码</strong>。</li><li>后端把 <code>requireUserVerification</code> 改为 <strong>true</strong>（注册 &amp; 登录）。</li><li>新增魔法链接两条路由 + Redis TTL/限流。</li><li>设置页支持<strong>多把凭据</strong>的增删改查（带最后使用时间）。</li><li>首绑后强提示<strong>添加第二把</strong>。</li><li>文案与支持：加入**“如何恢复账号”**帮助页。</li></ol><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>你完全可以提供**“从第一天起就不需要记密码、也不必再输密码”**的体验：</p><ul><li>新用户走 <strong>Passkey-first</strong>；</li><li>老用户用<strong>一次性无密码手段</strong>完成绑定；</li><li>以后所有登录<strong>都用通行密钥</strong>；</li><li>通过<strong>多把钥匙 + 恢复通道 + 风控</strong>，把“忘记密码”的痛点与“丢设备”的风险同时解决。</li></ul>',25)])])}const h=t(n,[["render",i]]);export{u as __pageData,h as default};
