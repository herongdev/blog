import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.oqSrIbQK.js";const c=JSON.parse('{"title":"一、后端（SimpleWebAuthn）配置项总览","description":"","frontmatter":{},"headers":[],"relativePath":"posts/需求实现/登录鉴权/所有配置项 + 有效值 + 作用.md","filePath":"posts/需求实现/登录鉴权/所有配置项 + 有效值 + 作用.md","lastUpdated":1758470468000}'),t={name:"posts/需求实现/登录鉴权/所有配置项 + 有效值 + 作用.md"};function l(r,s,o,p,h,d){return a(),e("div",null,[...s[0]||(s[0]=[n(`<p>太对路了——把“所有配置项 + 有效值 + 作用”讲清楚，前后端各怎么用，以及<strong>如何判断注册来源是谷歌 / 苹果 / 微软</strong>。下面一次性讲透，并给你几段<strong>只需粘贴的最小改动</strong>代码（遵循你“不整段贴全”的要求）。</p><hr><h1 id="一、后端-simplewebauthn-配置项总览" tabindex="-1">一、后端（SimpleWebAuthn）配置项总览 <a class="header-anchor" href="#一、后端-simplewebauthn-配置项总览" aria-label="Permalink to &quot;一、后端（SimpleWebAuthn）配置项总览&quot;">​</a></h1><h2 id="_1-generateregistrationoptions-注册发起" tabindex="-1">1) <code>generateRegistrationOptions(...)</code>（注册发起） <a class="header-anchor" href="#_1-generateregistrationoptions-注册发起" aria-label="Permalink to &quot;1) \`generateRegistrationOptions(...)\`（注册发起）&quot;">​</a></h2><p><strong>常用参数（含有效值 &amp; 作用）</strong></p><ul><li><p><code>rpName: string</code> 你的站点/应用展示名称（出现在系统弹窗里）。</p></li><li><p><code>rpID: string</code> Relying Party ID（通常就是你的域名，如 <code>example.com</code>；App 内使用同 RP ID）。用于<strong>同源校验</strong>，必须与前端 <code>origin</code>、系统 UI 一致。</p></li><li><p><code>userID: BufferSource</code> 你后端的用户唯一 ID（建议将数字/UUID 转成 <code>Buffer.from(...)</code>）。注册后可反查到用户。</p></li><li><p><code>userName: string</code> 用户名（可用 userId 占位），供系统 UI 展示/内部标识。</p></li><li><p><code>userDisplayName?: string</code> 友好展示名（可选）。</p></li><li><p><code>attestationType: &#39;none&#39; | &#39;direct&#39; | &#39;indirect&#39; | &#39;enterprise&#39;</code><strong>建议：<code>&#39;none&#39;</code></strong>。iOS/Android 平台 Passkey <strong>常不给可验证的证明</strong>；<code>direct</code> 往往拿不到签名链。除非企业场景才考虑 <code>enterprise</code>。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</p></li><li><p><code>authenticatorSelection?: { ... }</code></p><ul><li><code>residentKey: &#39;required&#39; | &#39;preferred&#39; | &#39;discouraged&#39;</code><strong>建议：<code>&#39;required&#39;</code></strong>（= 可发现凭据 / Discoverable Credential），才能<strong>无用户名直登</strong>。</li><li><code>userVerification: &#39;required&#39; | &#39;preferred&#39; | &#39;discouraged&#39;</code><strong>建议：<code>&#39;required&#39;</code> 或 <code>preferred</code></strong>（Face/Touch/Windows Hello）。</li><li><code>authenticatorAttachment?: &#39;platform&#39; | &#39;cross-platform&#39;</code> 仅当你<strong>只想收平台内置</strong>时可设 <code>platform</code>；多数场景<strong>不设</strong>，允许安全钥匙。</li></ul></li><li><p><code>supportedAlgorithmIDs: number[]</code>（COSE 算法）</p><ul><li><code>-7</code> = ES256（<strong>最广泛支持</strong>：Apple/Google/Windows）</li><li><code>-257</code> = RS256（部分平台/旧设备）</li><li><code>-8</code> = EdDSA（Ed25519，逐步普及） <strong>建议</strong>：至少 <code>[-7]</code>；为兼容性可加 <code>-257</code>；前瞻可再加 <code>-8</code>。</li></ul></li><li><p><code>excludeCredentials?: [{ id, type, transports? }...]</code> 避免同一 Authenticator 重复注册（也可限制每供应商最多 1~2 把）。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</p></li><li><p><code>extensions?: { credProps?: true, ... }</code> 建议打开 <code>credProps: true</code>，以便在回包里知道是否生成了 <code>rk</code>（resident key = 可发现凭据）。</p></li></ul><blockquote><p>这些字段的“形状”和默认值与 WebAuthn 规范一致，SimpleWebAuthn 会帮你生成随机 <code>challenge</code> 并做类型转换。参考其“Passkeys”与包文档。(<a href="https://simplewebauthn.dev/docs/advanced/passkeys?utm_source=chatgpt.com" title="Passkeys" target="_blank" rel="noreferrer">simplewebauthn.dev</a>)</p></blockquote><hr><h2 id="_2-verifyregistrationresponse-注册校验" tabindex="-1">2) <code>verifyRegistrationResponse(...)</code>（注册校验） <a class="header-anchor" href="#_2-verifyregistrationresponse-注册校验" aria-label="Permalink to &quot;2) \`verifyRegistrationResponse(...)\`（注册校验）&quot;">​</a></h2><p><strong>关键输入</strong></p><ul><li><code>response</code>：前端原样回传的对象</li><li><code>expectedChallenge</code>：你发出的那个 challenge</li><li><code>expectedOrigin</code>：前端实际 origin（H5 如 <code>https://a.com</code>；App WebView/中间层同）</li><li><code>expectedRPID</code>：上文 <code>rpID</code></li><li><code>requireUserVerification: boolean</code>：<strong>建议 true/或至少 preferred</strong>，确保生物特征/系统 PIN 过一遍。</li></ul><p><strong>关键输出（部分）</strong></p><ul><li><p><code>verified: boolean</code></p></li><li><p><code>registrationInfo</code>:</p><ul><li><code>credential: { id, publicKey, counter, transports, aaguid? }</code></li><li><code>credentialDeviceType: &#39;singleDevice&#39; | &#39;multiDevice&#39;</code></li><li><code>credentialBackedUp: boolean</code>（云端已备份，多设备同步） 这些在理解“passkey 是不是云同步、多设备”等非常有用。(<a href="https://simplewebauthn.dev/docs/advanced/passkeys?utm_source=chatgpt.com" title="Passkeys" target="_blank" rel="noreferrer">simplewebauthn.dev</a>)</li></ul></li></ul><hr><h2 id="_3-generateauthenticationoptions-登录发起" tabindex="-1">3) <code>generateAuthenticationOptions(...)</code>（登录发起） <a class="header-anchor" href="#_3-generateauthenticationoptions-登录发起" aria-label="Permalink to &quot;3) \`generateAuthenticationOptions(...)\`（登录发起）&quot;">​</a></h2><ul><li><code>rpID: string</code>：同上</li><li><code>allowCredentials?: [{ id, type, transports? }...]</code><strong>不传</strong> → 走<strong>无用户名发现式</strong>（条件 UI / 可发现凭据）。 如要“只允许此用户的凭据”，可传该用户的已绑定 credentialId 列表。</li><li><code>userVerification: &#39;required&#39; | &#39;preferred&#39; | &#39;discouraged&#39;</code><strong>建议：<code>required</code> 或 <code>preferred</code></strong>。</li><li><code>timeout?: number</code>：如 60000</li><li><code>extensions?: { appidExclude?, largeBlob? ... }</code>：一般默认即可。</li></ul><hr><h2 id="_4-verifyauthenticationresponse-登录校验" tabindex="-1">4) <code>verifyAuthenticationResponse(...)</code>（登录校验） <a class="header-anchor" href="#_4-verifyauthenticationresponse-登录校验" aria-label="Permalink to &quot;4) \`verifyAuthenticationResponse(...)\`（登录校验）&quot;">​</a></h2><ul><li><code>response</code> / <code>expectedChallenge</code> / <code>expectedOrigin</code> / <code>expectedRPID</code> 同注册</li><li><code>authenticator</code>：从你库里取出的该 credential 的 <code>{ credentialID&lt;Buffer&gt;, credentialPublicKey&lt;Buffer&gt;, counter&lt;number&gt;, transports? }</code></li><li><code>requireUserVerification</code>：同上</li><li>输出包含 <code>newCounter</code>（要<strong>入库更新</strong>，抵御重放）。</li></ul><hr><h1 id="二、前端配置项-h5-app" tabindex="-1">二、前端配置项（H5 &amp; App） <a class="header-anchor" href="#二、前端配置项-h5-app" aria-label="Permalink to &quot;二、前端配置项（H5 &amp; App）&quot;">​</a></h1><p>你前端已经封装了：</p><ul><li><code>createRegistrationPayload(publicKeyOptions)</code></li><li><code>createAuthenticationPayload(publicKeyOptions, { conditional })</code></li></ul><p><strong>它们要的 <code>publicKeyOptions</code> 就是 WebAuthn 规范里的</strong>：</p><h3 id="a-publickeycredentialcreationoptions-注册" tabindex="-1">A) <code>PublicKeyCredentialCreationOptions</code>（注册） <a class="header-anchor" href="#a-publickeycredentialcreationoptions-注册" aria-label="Permalink to &quot;A) \`PublicKeyCredentialCreationOptions\`（注册）&quot;">​</a></h3><ul><li><code>rp: { id, name }</code> —— <strong>rp.id 必须与后端 rpID 一致</strong></li><li><code>user: { id&lt;BufferSource&gt;, name, displayName }</code></li><li><code>challenge: BufferSource</code></li><li><code>pubKeyCredParams: [{ type: &#39;public-key&#39;, alg: -7 | -257 | -8 ... }]</code></li><li><code>timeout?: number</code></li><li><code>attestation: &#39;none&#39; | &#39;direct&#39; | &#39;indirect&#39; | &#39;enterprise&#39;</code> —— 建议 <code>&#39;none&#39;</code></li><li><code>authenticatorSelection</code>（同后端）</li><li><code>excludeCredentials?: ...</code></li><li><code>extensions?: { credProps?: true }</code></li></ul><h3 id="b-publickeycredentialrequestoptions-登录" tabindex="-1">B) <code>PublicKeyCredentialRequestOptions</code>（登录） <a class="header-anchor" href="#b-publickeycredentialrequestoptions-登录" aria-label="Permalink to &quot;B) \`PublicKeyCredentialRequestOptions\`（登录）&quot;">​</a></h3><ul><li><code>rpId: string</code></li><li><code>challenge: BufferSource</code></li><li><code>allowCredentials?: ...</code>（<strong>不传</strong>=可发现凭据）</li><li><code>userVerification: &#39;required&#39; | &#39;preferred&#39; | &#39;discouraged&#39;</code></li><li><code>timeout?: number</code></li><li><code>extensions?: ...</code></li></ul><h3 id="c-h5-的-条件-ui-无用户名直登" tabindex="-1">C) H5 的“条件 UI”（无用户名直登） <a class="header-anchor" href="#c-h5-的-条件-ui-无用户名直登" aria-label="Permalink to &quot;C) H5 的“条件 UI”（无用户名直登）&quot;">​</a></h3><ul><li>Chrome 需传 <code>mediation: &#39;conditional&#39;</code>（有些库用 second param <code>{ conditional: true }</code> 实现）</li><li>Safari/iOS/macOS 会自动弹出 参考 SimpleWebAuthn browser 包文档（含 auto/conditional 说明）。(<a href="https://simplewebauthn.dev/docs/packages/browser?utm_source=chatgpt.com" title="simplewebauthn/browser" target="_blank" rel="noreferrer">simplewebauthn.dev</a>)</li></ul><h3 id="d-app-端-ios-android-原生" tabindex="-1">D) App 端（iOS/Android 原生） <a class="header-anchor" href="#d-app-端-ios-android-原生" aria-label="Permalink to &quot;D) App 端（iOS/Android 原生）&quot;">​</a></h3><ul><li><strong>iOS</strong> 用 <code>ASAuthorizationPlatformPublicKeyCredentialProvider</code>； <strong>Android</strong> 用 <code>androidx.credentials</code> 的 <code>CreatePublicKeyCredentialRequest</code> / <code>GetPublicKeyCredentialOption</code>。 它们都吃<strong>同一份 <code>publicKey</code> JSON</strong>（即上面 Options），所以你的 UTS 插件只需<strong>透传</strong>。 （这也是官方推荐形态，减少 JS ↔ 原生映射误差。）</li></ul><hr><h1 id="三、如何识别-谷歌-苹果-微软-平台" tabindex="-1">三、如何识别“谷歌/苹果/微软”平台？ <a class="header-anchor" href="#三、如何识别-谷歌-苹果-微软-平台" aria-label="Permalink to &quot;三、如何识别“谷歌/苹果/微软”平台？&quot;">​</a></h1><p><strong>权威方式：看 AAGUID</strong>（注册阶段返回的 <code>authenticatorData</code> 里带的<strong>设备模型 GUID</strong>）。</p><ul><li><p>SimpleWebAuthn 在 <code>verifyRegistrationResponse</code> 的结果里就可取到（见下方补丁）。</p></li><li><p>然后对照<strong>社区维护的映射表</strong>（含名称与图标 SVG）。</p><ul><li><strong>Android / Google Password Manager</strong> 示例 AAGUID：<code>ea9b8d66-4d01-1d21-3ce4-b6b48cb575d4</code>。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li><li><strong>Windows Hello</strong> 常见 AAGUID： <code>08987058-cadc-4b81-b6e1-30de50dcbe96</code>、<code>9ddd1817-af5a-4672-a2b9-3e3dd95000a9</code>、<code>6028b017-b1d4-4c02-b4b3-afcdafc96bb2</code>。(<a href="https://www.corbado.com/glossary/windows-hello?utm_source=chatgpt.com" title="What is Windows Hello? Definition, AAGUID and Role in ..." target="_blank" rel="noreferrer">Corbado</a>)</li><li><strong>Apple / iCloud Keychain</strong>：<strong>常返回全零</strong>（出于隐私/无证明情况下），即：<code>00000000-0000-0000-0000-000000000000</code>，因此“无法唯一识别”，可标注为“Apple/未知”。(<a href="https://developer.apple.com/forums/tags/passkeys-in-icloud-keychain/?page=2&amp;sortBy=lastUpdated&amp;utm_source=chatgpt.com" title="Passkeys in iCloud Keychain" target="_blank" rel="noreferrer">Apple Developer</a>)</li><li>第三方管理器（1Password、Bitwarden…）请用社区清单匹配（长期维护）。(<a href="https://github.com/passkeydeveloper/passkey-authenticator-aaguids" title="GitHub - passkeydeveloper/passkey-authenticator-aaguids: This repo contains a community sourced list of AAGUIDs for passkey credential managers to help with naming in end user management UIs" target="_blank" rel="noreferrer">GitHub</a>)</li></ul></li></ul><blockquote><p>注意：<strong>只有在有可验证的 attestation 时，AAGUID 才能被强信任</strong>；iOS/Android 常不给直接证明，所以<strong>只能当“展示用途”</strong>（比如在“已绑定的通行密钥”列表里显示来源与图标）。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</p></blockquote><hr><h1 id="四、与前端过程的联动-——-每个配置项如何在-流-里落位" tabindex="-1">四、与前端过程的联动 —— 每个配置项如何在“流”里落位 <a class="header-anchor" href="#四、与前端过程的联动-——-每个配置项如何在-流-里落位" aria-label="Permalink to &quot;四、与前端过程的联动 —— 每个配置项如何在“流”里落位&quot;">​</a></h1><p><strong>注册流（JIT + 可发现凭据）</strong></p><ol><li><p>前端调 <code>/passkeys/register/options</code> 服务器用上述“推荐值”生成：</p><ul><li><code>attestationType: &#39;none&#39;</code></li><li><code>authenticatorSelection: { residentKey: &#39;required&#39;, userVerification: &#39;preferred&#39; }</code></li><li><code>supportedAlgorithmIDs: [-7]</code>（可再加 <code>-257</code>）</li><li><code>extensions: { credProps: true }</code></li></ul></li><li><p>前端拿到 <code>options</code> 后：</p><ul><li>H5：<code>createRegistrationPayload(options)</code>；</li><li>App：UTS 插件把 <code>options.publicKey</code> 透传给 iOS/Android 原生。</li></ul></li><li><p>后端 <code>verifyRegistrationResponse(...)</code>：</p><ul><li>对 <code>expectedChallenge/Origin/RPID</code> 校验</li><li>成功后<strong>落 DB</strong>：<code>credentialId</code>、<code>publicKey</code>、<code>counter</code>、<code>transports</code>、<code>aaguid</code>、<code>credentialDeviceType</code>、<code>credentialBackedUp</code>、<strong>（可选）clientEnv</strong>（前端传的系统信息，便于“来源”辅助展示）。</li></ul></li><li><p>在“我的通行密钥”页：</p><ul><li>显示<strong>创建时间</strong>、<strong>最近使用时间</strong>、<strong>来源</strong>（由 AAGUID 映射 + <code>clientEnv</code> 兜底）。</li></ul></li></ol><p><strong>登录流（无用户名直登）</strong></p><ol><li><p>前端调 <code>/passkeys/login/options</code>（不传 <code>allowCredentials</code>）</p><ul><li>服务器 <code>generateAuthenticationOptions({ rpID, userVerification: &#39;required&#39; })</code>。</li><li>H5：传 <code>{ conditional: true }</code> 开条件 UI；App：直接调原生 GetAPI。</li></ul></li><li><p><code>verifyAuthenticationResponse(...)</code>：</p><ul><li>验证签名 + 更新 <code>counter</code>；</li><li>颁发会话；</li><li>记录使用时间（用于“最近使用”展示）。</li></ul></li></ol><hr><h1 id="五、最小改动代码片段-仅贴需要添加-修改的行" tabindex="-1">五、<strong>最小改动代码片段</strong>（仅贴需要添加/修改的行） <a class="header-anchor" href="#五、最小改动代码片段-仅贴需要添加-修改的行" aria-label="Permalink to &quot;五、**最小改动代码片段**（仅贴需要添加/修改的行）&quot;">​</a></h1><blockquote><p>遵循你“不要整段完整代码”的偏好。以下三处直接加入即可。</p></blockquote><h3 id="_1-注册校验里-保存-aaguid-并映射供应商" tabindex="-1">1) <strong>注册校验</strong>里：保存 <code>aaguid</code> 并映射供应商 <a class="header-anchor" href="#_1-注册校验里-保存-aaguid-并映射供应商" aria-label="Permalink to &quot;1) **注册校验**里：保存 \`aaguid\` 并映射供应商&quot;">​</a></h3><p><strong>位置</strong>：你的 <code>verifyRegistration(...)</code> 逻辑保存凭据之后</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在“入库凭据”代码之后，追加以下几行：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// —— 读取 AAGUID（库版本不同，可能在 registrationInfo 或 registrationInfo.credential 下）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂：兼容字段差异，先取 registrationInfo.aaguid，再尝试 credential.aaguid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aaguid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (verification.registrationInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.aaguid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (verification.registrationInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.credential?.aaguid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// —— 供应商映射（最小内置 + 可扩展）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> provider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapAAGUIDToProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aaguid);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// —— 更新凭据的元信息（你已有 creds.createCredential，可补个 updateMetadata）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.creds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateCredentialMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentialIdB64, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  aaguid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  provider, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Google Password Manager&#39; | &#39;Windows Hello&#39; | &#39;Apple/Unknown&#39; | &#39;1Password&#39; | ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>并新增一个工具函数（放 service 尾部或 utils）：</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简单映射；建议你结合“社区 AAGUID 列表”按需扩展</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapAAGUIDToProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">aaguid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aaguid) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aaguid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Google Password Manager (Android)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ea9b8d66-4d01-1d21-3ce4-b6b48cb575d4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Google Password Manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Android</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Windows Hello</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;08987058-cadc-4b81-b6e1-30de50dcbe96&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;9ddd1817-af5a-4672-a2b9-3e3dd95000a9&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;6028b017-b1d4-4c02-b4b3-afcdafc96bb2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Windows Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Apple 常返回全零（无证明），只能标注 Unknown/Apple</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;00000000-0000-0000-0000-000000000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Apple/Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他第三方（1Password/Bitwarden…）可按社区清单补充</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>参考：AAGUID 识别 &amp; 示例、Windows Hello AAGUID 列表、社区映射清单。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</p></blockquote><hr><h3 id="_2-注册发起里-确保-可发现凭据-credprops" tabindex="-1">2) <strong>注册发起</strong>里：确保“可发现凭据 + credProps” <a class="header-anchor" href="#_2-注册发起里-确保-可发现凭据-credprops" aria-label="Permalink to &quot;2) **注册发起**里：确保“可发现凭据 + credProps”&quot;">​</a></h3><p><strong>位置</strong>：<code>generateRegistrationOptions(...)</code> 调用处</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调整/补充字段（只示例关键行）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attestationType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supportedAlgorithmIDs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 兼容性再加 -257</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticatorSelection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  residentKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;required&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ★ 允许无用户名直登</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  userVerification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preferred&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &#39;required&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // authenticatorAttachment: &#39;platform&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如你只想收平台内置再打开</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">credProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span></code></pre></div><hr><h3 id="_3-前端-verify-body-附带-环境指纹-用于供应商兜底判定-显示" tabindex="-1">3) <strong>前端 Verify Body</strong>：附带“环境指纹”（用于供应商兜底判定/显示） <a class="header-anchor" href="#_3-前端-verify-body-附带-环境指纹-用于供应商兜底判定-显示" aria-label="Permalink to &quot;3) **前端 Verify Body**：附带“环境指纹”（用于供应商兜底判定/显示）&quot;">​</a></h3><p><strong>位置</strong>：你生成 <code>verifyRegBody</code> / <code>verifyBody</code> 处</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂：结合 uni.getSystemInfo 的关键字段，告诉后端“来自哪个端”</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clientEnv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  osName: sys.osName, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;ios&#39; | &#39;android&#39; | &#39;harmonyos&#39; | ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  uniPlatform: sys.uniPlatform, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;app&#39; | &#39;web&#39; | &#39;mp-weixin&#39; ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hostName: sys.hostName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浏览器/宿主标识（H5/小程序）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> verifyRegBody</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">corePayload, userId, clientEnv }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注册 verify</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> verifyBody</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">payload, clientEnv }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 登录 verify</span></span></code></pre></div><blockquote><p>这样当 AAGUID 是全零/缺失时（苹果常见），你也能在后台列表用 <code>osName</code> 做轻量标注（如 “来自 iOS（Apple/Unknown）”）。</p></blockquote><hr><h1 id="六、最佳默认模板-直接抄" tabindex="-1">六、<strong>最佳默认模板</strong>（直接抄） <a class="header-anchor" href="#六、最佳默认模板-直接抄" aria-label="Permalink to &quot;六、**最佳默认模板**（直接抄）&quot;">​</a></h1><h3 id="注册-options-后端" tabindex="-1">注册 options（后端） <a class="header-anchor" href="#注册-options-后端" aria-label="Permalink to &quot;注册 options（后端）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateRegistrationOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rpName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你的产品名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rpID: rpID, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userID: Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.id), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.id),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  attestationType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  supportedAlgorithmIDs: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  authenticatorSelection: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    residentKey: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userVerification: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preferred&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // authenticatorAttachment: &#39;platform&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extensions: { credProps: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="登录-options-后端" tabindex="-1">登录 options（后端） <a class="header-anchor" href="#登录-options-后端" aria-label="Permalink to &quot;登录 options（后端）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateAuthenticationOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rpID,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  userVerification: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 preferred</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不传 allowCredentials → 可发现凭据直登</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="h5-条件-ui-前端" tabindex="-1">H5 条件 UI（前端） <a class="header-anchor" href="#h5-条件-ui-前端" aria-label="Permalink to &quot;H5 条件 UI（前端）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂：开启条件 UI（Chrome）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> verifyBody</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAuthenticationPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  conditional: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h1 id="七、常见坑-提醒" tabindex="-1">七、常见坑 &amp; 提醒 <a class="header-anchor" href="#七、常见坑-提醒" aria-label="Permalink to &quot;七、常见坑 &amp; 提醒&quot;">​</a></h1><ul><li><strong>RPID / Origin 严格匹配</strong>：H5 与 App WebView/中间层均需一致，否则验签失败。</li><li><strong>iOS &amp; Android 多数“无 attestation”</strong>：AAGUID 仅作展示，不作强风控。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li><li><strong>计数器务必更新</strong>：每次登录校验通过后，把 <code>newCounter</code> 入库。</li><li><strong>多把 Passkey 管理</strong>：建议列表里展示：创建时间、最近使用、<strong>来源（AAGUID/环境兜底）</strong>，并允许删除。(<a href="https://web.dev/articles/webauthn-aaguid" title="Determine the passkey provider with AAGUID  |  Articles  |  web.dev" target="_blank" rel="noreferrer">web.dev</a>)</li><li><strong>算法兼容</strong>：主打 <code>-7(ES256)</code>，必要时加 <code>-257(RS256)</code>；<code>-8(EdDSA)</code>逐步普及但不必强依赖。</li><li><strong>Android “Credential Manager”</strong> 和 <strong>iOS ASAuthorization</strong>：都吃同一份 <code>publicKey</code> JSON，UTS 插件只需透传（你的结构已满足“只在 index.uts 做薄层”的最佳实践）。</li><li><strong>AAGUID 映射表</strong>：可定期拉取社区清单（本地缓存一份 JSON），但注意它<strong>不是安全来源</strong>，仅供 UI 显示。(<a href="https://github.com/passkeydeveloper/passkey-authenticator-aaguids" title="GitHub - passkeydeveloper/passkey-authenticator-aaguids: This repo contains a community sourced list of AAGUIDs for passkey credential managers to help with naming in end user management UIs" target="_blank" rel="noreferrer">GitHub</a>)</li></ul><hr><p>如果你愿意，我可以再给你把<strong>后端 <code>creds</code> 表结构里新增 <code>aaguid/provider/last_used_at</code></strong> 的迁移 SQL 和**“通行密钥管理”接口<strong>的最小改动补丁，也按你的规则只贴</strong>修改行**。</p>`,74)])])}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
