import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.oqSrIbQK.js";const E=JSON.parse('{"title":"/user 会不会匹配根路由 ‘/’？","description":"","frontmatter":{"title":"/user 会不会匹配根路由 ‘/’？","date":"2025-09-05T19:00:06.000Z","tags":null},"headers":[],"relativePath":"posts/前端/路由/user-会不会匹配根路由-‘-’？.md","filePath":"posts/前端/路由/user-会不会匹配根路由-‘-’？.md","lastUpdated":1758163069000}'),n={name:"posts/前端/路由/user-会不会匹配根路由-‘-’？.md"};function h(p,s,l,k,r,d){return t(),a("div",null,[...s[0]||(s[0]=[e(`<hr><p>title: “/user 会不会匹配根路由 ‘/’？” date: 2025-09-05 tags: [Vue Router 4, 路由匹配, 懒加载]</p><hr><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>不会。<code>/user</code> <strong>不会</strong>匹配到你定义的根路由 <code>{ path: &#39;/&#39; }</code>。它只会匹配到<strong>自己</strong>这条顶层路由 <code>{ path: &#39;/user&#39; }</code>，因此也<strong>不会</strong>渲染 <code>@/views/(public)/layout.vue</code>。</p><h2 id="为什么" tabindex="-1">为什么 <a class="header-anchor" href="#为什么" aria-label="Permalink to &quot;为什么&quot;">​</a></h2><ul><li>Vue Router 使用基于 <code>path-to-regexp</code> 的<strong>精确匹配</strong>。<code>&#39;/&#39;</code> 不是“前缀匹配一切”，只匹配根路径本身，或作为<strong>父路由</strong>被命中的<strong>相对子路由</strong>所包含。</li><li>你现在把 <code>/user</code> 定义为<strong>顶层</strong>路由（不在 <code>children</code> 里），所以跳转到 <code>/user</code> 时，<code>to.matched</code> 里只有 <code>/user</code> 这一条记录，不会包含 <code>&#39;/&#39;</code> 那个布局。</li></ul><h2 id="什么时候会经过-布局" tabindex="-1">什么时候会经过 <code>&#39;/&#39;</code> 布局？ <a class="header-anchor" href="#什么时候会经过-布局" aria-label="Permalink to &quot;什么时候会经过 \`&#39;/&#39;\` 布局？&quot;">​</a></h2><p>只有当你把 <strong>子路由写成相对路径</strong> 时，例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂逻辑：相对子路由会被拼成 /user，且会渲染父布局</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@/views/(public)/layout.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@/views/user/page.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意没有前导斜杠</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面这种写法才会让 <code>/user</code> 经过 <code>layout.vue</code>。而你当前是：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@/views/user/page.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 顶层、绝对路径</span></span></code></pre></div><p>两者行为不同。</p><h2 id="快速自检-可在控制台验证" tabindex="-1">快速自检（可在控制台验证） <a class="header-anchor" href="#快速自检-可在控制台验证" aria-label="Permalink to &quot;快速自检（可在控制台验证）&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复杂逻辑：查看匹配链，确认是否包含根布局</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).matched.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.path));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 期望：[&#39;/user&#39;]，而不是 [&#39;/&#39;, &#39;/user&#39;]</span></span></code></pre></div>`,15)])])}const g=i(n,[["render",h]]);export{E as __pageData,g as default};
