import{_ as t,c as i,o as l,ag as o}from"./chunks/framework.oqSrIbQK.js";const g=JSON.parse('{"title":"测试文章","description":"<一句话摘要，便于 SEO>","frontmatter":{"title":"测试文章","description":"<一句话摘要，便于 SEO>","date":"2025-09-09T00:00:00.000Z","tags":["<标签1>","<标签2>"]},"headers":[],"relativePath":"posts/前端/常用库/split.js的使用.md","filePath":"posts/前端/常用库/split.js的使用.md","lastUpdated":1758216284000}'),a={name:"posts/前端/常用库/split.js的使用.md"};function d(r,e,s,n,c,h){return l(),i("div",null,[...e[0]||(e[0]=[o('<h1 id="split-js-配置项" tabindex="-1"><strong>Split.js</strong> 配置项 <a class="header-anchor" href="#split-js-配置项" aria-label="Permalink to &quot;**Split.js** 配置项&quot;">​</a></h1><h2 id="_1-direction-horizontal" tabindex="-1">1. <code>direction: &#39;horizontal&#39;</code> <a class="header-anchor" href="#_1-direction-horizontal" aria-label="Permalink to &quot;1. `direction: &#39;horizontal&#39;`&quot;">​</a></h2><ul><li><strong>作用</strong>：设置分割方向。</li><li><strong>可选值</strong>： <ul><li><code>&#39;horizontal&#39;</code>：左右分割（垂直分隔条）。</li><li><code>&#39;vertical&#39;</code>：上下分割（水平分隔条）。</li></ul></li><li><strong>这里的用法</strong>：<code>&#39;horizontal&#39;</code> 表示左边是 SymbolList，右边是 ChartPanel。</li></ul><h2 id="_2-sizes-sidebarpanelwidth-value-containerwidth-sidebarpanelwidth-value" tabindex="-1">2. <code>sizes: [sidebarPanelWidth.value, containerWidth - sidebarPanelWidth.value]</code> <a class="header-anchor" href="#_2-sizes-sidebarpanelwidth-value-containerwidth-sidebarpanelwidth-value" aria-label="Permalink to &quot;2. `sizes: [sidebarPanelWidth.value, containerWidth - sidebarPanelWidth.value]`&quot;">​</a></h2><ul><li><strong>作用</strong>：设置两个面板的初始尺寸（像素或百分比）。</li><li><strong>值的含义</strong>： <ul><li>第一个值：左侧面板宽度（这里是 <code>sidebarPanelWidth.value</code>）。</li><li>第二个值：右侧面板宽度（容器总宽度减去左侧宽度）。</li></ul></li><li><strong>注意</strong>：如果传百分比（如 <code>[30, 70]</code>），则按比例分配；传像素值则按固定像素。</li></ul><h2 id="_3-minsize-0-0" tabindex="-1">3. <code>minSize: [0, 0]</code> <a class="header-anchor" href="#_3-minsize-0-0" aria-label="Permalink to &quot;3. `minSize: [0, 0]`&quot;">​</a></h2><ul><li><strong>作用</strong>：设置每个面板的最小尺寸。</li><li><strong>值的含义</strong>： <ul><li><code>[0, 0]</code> 表示两个面板都可以被拖到 0 像素（完全隐藏）。</li></ul></li><li><strong>常见用法</strong>：防止面板被拖得太小导致内容不可见，比如 <code>[200, 300]</code>。</li></ul><h2 id="_4-maxsize-tablewidth-infinity" tabindex="-1">4. <code>maxSize: [tableWidth, Infinity]</code> <a class="header-anchor" href="#_4-maxsize-tablewidth-infinity" aria-label="Permalink to &quot;4. `maxSize: [tableWidth, Infinity]`&quot;">​</a></h2><ul><li><strong>作用</strong>：设置每个面板的最大尺寸。</li><li><strong>值的含义</strong>： <ul><li>第一个值：左侧最大宽度是 <code>tableWidth</code>（表格宽度）。</li><li>第二个值：右侧最大宽度无限制（<code>Infinity</code>）。</li></ul></li><li><strong>用途</strong>：避免左侧面板被拖得过宽，影响右侧内容显示。</li></ul><h2 id="_5-guttersize-8" tabindex="-1">5. <code>gutterSize: 8</code> <a class="header-anchor" href="#_5-guttersize-8" aria-label="Permalink to &quot;5. `gutterSize: 8`&quot;">​</a></h2><ul><li><strong>作用</strong>：分隔条的宽度（水平分割时是宽度，垂直分割时是高度）。</li><li><strong>值的含义</strong>：<code>8</code> 表示分隔条宽度为 8 像素。</li></ul><h2 id="_6-snapoffset-chartpanelheight-value-10-0-10" tabindex="-1">6. <code>snapOffset: chartPanelHeight.value &lt; 10 ? 0 : 10</code> <a class="header-anchor" href="#_6-snapoffset-chartpanelheight-value-10-0-10" aria-label="Permalink to &quot;6. `snapOffset: chartPanelHeight.value &lt; 10 ? 0 : 10`&quot;">​</a></h2><ul><li><strong>作用</strong>：拖动时的“吸附”距离。</li><li><strong>值的含义</strong>： <ul><li>如果 <code>chartPanelHeight</code> 小于 10，则吸附距离为 0（无吸附）。</li><li>否则为 10 像素，表示拖动接近边界 10 像素时会自动吸附到边界。</li></ul></li><li><strong>用途</strong>：提升拖动体验，方便快速收起或展开面板。</li></ul><h2 id="_7-elementstyle-dimension-size-guttersize-flex-basis-calc-size-px-guttersize-px" tabindex="-1">7. <code>elementStyle: (dimension, size, gutterSize) =&gt; ({ &#39;flex-basis&#39;: \\</code>calc(${size}px - ${gutterSize}px)` })` <a class="header-anchor" href="#_7-elementstyle-dimension-size-guttersize-flex-basis-calc-size-px-guttersize-px" aria-label="Permalink to &quot;7. `elementStyle: (dimension, size, gutterSize) =&gt; ({ &#39;flex-basis&#39;: \\`calc(${size}px - ${gutterSize}px)\\` })`&quot;">​</a></h2><ul><li><strong>作用</strong>：自定义面板的 CSS 样式。</li><li><strong>这里的逻辑</strong>： <ul><li><code>flex-basis</code> 决定了面板在 Flex 布局中的基础尺寸。</li><li>用 <code>calc()</code> 减去分隔条的宽度，保证布局精确。</li></ul></li></ul><h2 id="_8-gutterstyle-width-8px-background-var-ground-50-cursor-col-resize" tabindex="-1">8. <code>gutterStyle: () =&gt; ({ width: &#39;8px&#39;, background: &#39;var(--ground-50)&#39;, cursor: &#39;col-resize&#39; })</code> <a class="header-anchor" href="#_8-gutterstyle-width-8px-background-var-ground-50-cursor-col-resize" aria-label="Permalink to &quot;8. `gutterStyle: () =&gt; ({ width: &#39;8px&#39;, background: &#39;var(--ground-50)&#39;, cursor: &#39;col-resize&#39; })`&quot;">​</a></h2><ul><li><strong>作用</strong>：自定义分隔条的样式。</li><li><strong>值的含义</strong>： <ul><li><code>width: &#39;8px&#39;</code>：分隔条宽度。</li><li><code>background: &#39;var(--ground-50)&#39;</code>：背景颜色（CSS 变量）。</li><li><code>cursor: &#39;col-resize&#39;</code>：鼠标悬停时显示左右拖动的光标。</li></ul></li></ul><h2 id="_9-ondrag-sizes-handlesidebarresizing-sizes" tabindex="-1">9. <code>onDrag: (sizes) =&gt; handleSidebarResizing(sizes)</code> <a class="header-anchor" href="#_9-ondrag-sizes-handlesidebarresizing-sizes" aria-label="Permalink to &quot;9. `onDrag: (sizes) =&gt; handleSidebarResizing(sizes)`&quot;">​</a></h2><ul><li><strong>作用</strong>：拖动分隔条时触发的回调。</li><li><strong>值的含义</strong>： <ul><li><code>sizes</code> 是当前两个面板的尺寸数组。</li><li><code>handleSidebarResizing(sizes)</code> 是你自定义的函数，用来更新状态（比如保存用户调整后的宽度）。</li></ul></li></ul><h3 id="总结表" tabindex="-1">总结表 <a class="header-anchor" href="#总结表" aria-label="Permalink to &quot;总结表&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>作用</th><th>常用值示例</th></tr></thead><tbody><tr><td><code>direction</code></td><td>分割方向</td><td><code>&#39;horizontal&#39;</code> / <code>&#39;vertical&#39;</code></td></tr><tr><td><code>sizes</code></td><td>初始尺寸</td><td><code>[300, 700]</code> 或 <code>[30, 70]</code></td></tr><tr><td><code>minSize</code></td><td>最小尺寸</td><td><code>[200, 300]</code></td></tr><tr><td><code>maxSize</code></td><td>最大尺寸</td><td><code>[500, Infinity]</code></td></tr><tr><td><code>gutterSize</code></td><td>分隔条宽度/高度</td><td><code>8</code></td></tr><tr><td><code>snapOffset</code></td><td>吸附距离</td><td><code>0</code> / <code>10</code></td></tr><tr><td><code>elementStyle</code></td><td>面板样式</td><td>自定义函数</td></tr><tr><td><code>gutterStyle</code></td><td>分隔条样式</td><td>自定义函数</td></tr><tr><td><code>onDrag</code></td><td>拖动回调</td><td><code>(sizes) =&gt; { ... }</code></td></tr></tbody></table><p>如果你愿意，我可以帮你画一个 <strong>Split.js 配置可视化示意图</strong>，让你直观理解这些参数是如何影响布局的，这样你在调试时会更快找到合适的值。<br> 你想让我帮你画这个示意图吗？</p><h1 id="如何隐藏侧板" tabindex="-1">如何隐藏侧板 <a class="header-anchor" href="#如何隐藏侧板" aria-label="Permalink to &quot;如何隐藏侧板&quot;">​</a></h1><ul><li>将保存侧板宽度的变量的值设置为 0</li><li>调用 horizontalSplit.setSizes 方法，重置面板数组中的有面板的宽度值</li><li>如果是最外侧的面板，我们隐藏一下 gutter, 主要是通过给分隔面板的父 Ref 添加一个新的 no-gutter 样式类；这个样式主要就是 display: none !important;</li></ul><h1 id="如何分隔上下面板-并支持最大化、最小化和正常" tabindex="-1">如何分隔上下面板，并支持最大化、最小化和正常 <a class="header-anchor" href="#如何分隔上下面板-并支持最大化、最小化和正常" aria-label="Permalink to &quot;如何分隔上下面板，并支持最大化、最小化和正常&quot;">​</a></h1><ul><li>安装库，给要分隔的面板和它的父面板加上类和 ref，便于控制</li><li>在 onMounted 后，初始化面板的初始大小，间隔，最大最小的尺寸</li><li>如果只有上下两块，它就只有三个状态：最大化、最小化、在最大和最小之间的任意尺寸；</li><li>我们通过调用 setSizes 设置 2 个面板的宽度，同时更新保存这 2 个值的数组；</li><li>如果我们想最大或最小化时，隐藏 gutter，可以在到达最大或最小时，给面板的父容器加上 no-gutter 样式类，隐藏 gutter，当切换到最大和最小之间时，我们又移除样式；</li></ul>',26)])])}const z=t(a,[["render",d]]);export{g as __pageData,z as default};
