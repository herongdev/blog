import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.oqSrIbQK.js";const d=JSON.parse('{"title":"wss 证书“老证还在生效”导致连接不上？——成因、误区与一套可复现的排查清单","description":"","frontmatter":{"title":"wss 证书“老证还在生效”导致连接不上？——成因、误区与一套可复现的排查清单","date":"2025-09-23T00:00:00.000Z","tags":null},"headers":[],"relativePath":"posts/需求实现/socket/wss 证书“老证还在生效”导致连接不上？——成因、误区与一套可复现的排查清单.md","filePath":"posts/需求实现/socket/wss 证书“老证还在生效”导致连接不上？——成因、误区与一套可复现的排查清单.md","lastUpdated":1758634537000}'),n={name:"posts/需求实现/socket/wss 证书“老证还在生效”导致连接不上？——成因、误区与一套可复现的排查清单.md"};function l(r,s,h,o,p,k){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="结论先说" tabindex="-1">结论先说 <a class="header-anchor" href="#结论先说" aria-label="Permalink to &quot;结论先说&quot;">​</a></h2><ul><li><strong>“我没在浏览器里直接访问这个域名，所以证书没下发到本地”是个误区。</strong> 只要你的前端从 <code>http://localhost</code> 去连 <code>wss://test.gtctrader1203.top/ws</code>，<strong>TLS 握手就会发生，服务端会下发证书</strong>；是否在地址栏访问过该域名不相关。WSS 与 HTTPS 一样，先走 TLS，后 <code>Upgrade</code> 成 WebSocket。(<a href="https://devcenter.heroku.com/articles/websocket-security?utm_source=chatgpt.com" title="WebSocket Security" target="_blank" rel="noreferrer">Heroku 开发中心</a>)</li><li>你先前用 <code>wscat</code> 看到 <strong>“Hostname/IP does not match certificate&#39;s altnames: cert for <a href="http://www.52wukong.com%E2%80%9D**%EF%BC%8C%E8%BF%99%E4%B8%8D%E6%98%AF%E2%80%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E6%97%A7%E8%AF%81%E4%B9%A6%E2%80%9D%EF%BC%8C%E8%80%8C%E6%98%AF**%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%93%BE%E8%B7%AF%E5%9C%A8" target="_blank" rel="noreferrer">www.52wukong.com”**，这不是“本地缓存旧证书”，而是**服务端链路在</a> SNI/证书选择上给了错证书</strong>（常见于多域名共用一套 443 的场景或 CDN/负载均衡未同步）。(<a href="https://serverfault.com/questions/923501/why-does-nginx-require-default-ssl-server-to-have-a-certificate?utm_source=chatgpt.com" title="Why does nginx require default ssl server to have a ..." target="_blank" rel="noreferrer">Server Fault</a>)</li></ul><hr><h2 id="为什么会-总是拿到旧-错证书" tabindex="-1">为什么会“总是拿到旧/错证书” <a class="header-anchor" href="#为什么会-总是拿到旧-错证书" aria-label="Permalink to &quot;为什么会“总是拿到旧/错证书”&quot;">​</a></h2><blockquote><p>下面几条是<strong>命中率最高</strong>的成因，按实际遇到的频率从高到低列出。</p></blockquote><ol><li><strong>SNI 对应关系错了 / 命中默认站点</strong></li></ol><ul><li>同一 IP:443 配了多个 <code>server_name</code>，但某个子域未正确匹配，Nginx/代理就会回落到“默认证书”（例如另一个站点的 <code>www.52wukong.com</code>），客户端自然报 <strong>SAN 不匹配</strong>。(<a href="https://stackoverflow.com/questions/26517238/nginx-using-wrong-ssl-certificate?utm_source=chatgpt.com" title="nginx using wrong ssl certificate" target="_blank" rel="noreferrer">Stack Overflow</a>)</li></ul><ol start="2"><li><strong>多前端实例未统一</strong>（CDN/负载均衡/多台网关）</li></ol><ul><li>证书更新只生效在<strong>部分节点</strong>，DNS 轮询或 CDN 调度把你分配到<strong>还没更新的边缘/实例</strong>，于是断续出现“还是旧证”。（Cloudflare 等厂商论坛里不少类似个案。）(<a href="https://community.cloudflare.com/t/ssl-hostname-mismatch-error-after-certificate-renewal-process/630523?utm_source=chatgpt.com" title="SSL Hostname Mismatch Error After Certificate Renewal ..." target="_blank" rel="noreferrer">Cloudflare 社区</a>)</li></ul><ol start="3"><li><strong>DNS 指向了“旧 IP”</strong></li></ol><ul><li>本机或上游 DNS 缓存未刷新，仍解析到旧的终端，旧终端上挂着老证。</li></ul><ol start="4"><li><strong>K8s/Ingress/ALB 证书绑定错误</strong></li></ol><ul><li>证书 Secret 没滚动、Listener 没切到新证，或 SNI 规则没覆盖该主机名，导致网关层挑错证书。</li></ul><blockquote><p>注：<strong>浏览器/Node 并不会“长期缓存服务端证书内容”来复用</strong>（会缓存中间证书/会话票据等，但不会导致“总是拿到旧证”这种主观错觉）。如果你确实总看到旧证，<strong>基本都是服务端/链路层在给错证</strong>，不是“因为我没访问过域名所以证书没到本地”。(<a href="https://superuser.com/questions/390664/do-web-browsers-cache-ssl-certificates?utm_source=chatgpt.com" title="Do web browsers cache SSL certificates?" target="_blank" rel="noreferrer">Super User</a>)</p></blockquote><hr><h2 id="一套可复现的排查路径-5-10-分钟搞定" tabindex="-1">一套可复现的排查路径（5 ～ 10 分钟搞定） <a class="header-anchor" href="#一套可复现的排查路径-5-10-分钟搞定" aria-label="Permalink to &quot;一套可复现的排查路径（5 ～ 10 分钟搞定）&quot;">​</a></h2><h3 id="_1-直连看-到底发来哪张证" tabindex="-1">1）直连看“到底发来哪张证” <a class="header-anchor" href="#_1-直连看-到底发来哪张证" aria-label="Permalink to &quot;1）直连看“到底发来哪张证”&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关键：一定加 -servername 来模拟 SNI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s_client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -servername</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -showcerts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -subject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -issuer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dates</span></span></code></pre></div><ul><li>如果 <code>subject</code>/<code>SAN</code> 里不含 <code>test.gtctrader1203.top</code>，就是服务端在<strong>该 IP:443 + SNI</strong> 场景下回了错证。(<a href="https://major.io/p/using-openssls-s_client-command-with-web-servers-using-server-name-indication-sni/?utm_source=chatgpt.com" title="Using OpenSSL&#39;s s_client command with web servers ..." target="_blank" rel="noreferrer">Major Hayden</a>)</li></ul><h3 id="_2-固定解析到某个-ip-验证-谁在给错证" tabindex="-1">2）固定解析到某个 IP 验证“谁在给错证” <a class="header-anchor" href="#_2-固定解析到某个-ip-验证-谁在给错证" aria-label="Permalink to &quot;2）固定解析到某个 IP 验证“谁在给错证”&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先查 A 记录（拿到每个回源 IP）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nslookup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 针对每个 IP 分别测试（用 --resolve 固定目标）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --resolve</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top:443:目标IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://test.gtctrader1203.top/ws/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s_client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 目标IP:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -servername</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top</span></span></code></pre></div><ul><li><p>逐个 IP 测一下，<strong>哪台节点在回错证</strong>一目了然：</p><ul><li>如果只有<strong>部分 IP</strong>错 → <strong>多实例没同步/某节点没换证</strong>；</li><li>如果<strong>所有 IP 都错</strong> → <strong>Nginx/Ingress server_name 或证书路径配置错</strong>。</li></ul></li></ul><h3 id="_3-断言是否-cdn-层问题" tabindex="-1">3）断言是否 CDN 层问题 <a class="header-anchor" href="#_3-断言是否-cdn-层问题" aria-label="Permalink to &quot;3）断言是否 CDN 层问题&quot;">​</a></h3><ul><li>若接入了 CDN（如 Cloudflare/阿里云 CDN），记住：<strong>边缘证书与源站证书是两回事</strong>。你需在 <strong>CDN 控制台</strong>为 <code>test.gtctrader1203.top</code> 正确签/配证书，模式尽量用 <strong>Full (strict)</strong>，并确认边缘节点已就绪。(<a href="https://community.cloudflare.com/t/help-ssl-experts-hostname-mismatch-issue/330350?utm_source=chatgpt.com" title="Help ssl experts! hostname mismatch issue" target="_blank" rel="noreferrer">Cloudflare 社区</a>)</li></ul><h3 id="_4-nginx-ingress-必查清单-只核对关键项" tabindex="-1">4）Nginx/Ingress 必查清单（只核对关键项） <a class="header-anchor" href="#_4-nginx-ingress-必查清单-只核对关键项" aria-label="Permalink to &quot;4）Nginx/Ingress 必查清单（只核对关键项）&quot;">​</a></h3><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 确保有单独匹配 test.gtctrader1203.top 的 server 块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.gtctrader1203.top;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 挂“包含 test.gtctrader1203.top 的证书”</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /etc/nginx/ssl/test.gtctrader1203.top/fullchain.pem;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/ssl/test.gtctrader1203.top/privkey.pem;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # WebSocket 升级</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /ws/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_http_version </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Upgrade $http_upgrade;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Connection </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Upgrade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_read_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://your_ws_upstream;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>不要让 443 的 <code>default_server</code> 端口用到别站的证书</strong>（否则 SNI 匹配失败时会回落成“错证”）。(<a href="https://serverfault.com/questions/923501/why-does-nginx-require-default-ssl-server-to-have-a-certificate?utm_source=chatgpt.com" title="Why does nginx require default ssl server to have a ..." target="_blank" rel="noreferrer">Server Fault</a>)</li></ul><hr><h2 id="你的场景的最可能根因-结合你前面的报错" tabindex="-1">你的场景的最可能根因（结合你前面的报错） <a class="header-anchor" href="#你的场景的最可能根因-结合你前面的报错" aria-label="Permalink to &quot;你的场景的最可能根因（结合你前面的报错）&quot;">​</a></h2><blockquote><p><code>wscat</code> 报“证书的 SAN 里写的是 **<a href="http://www.52wukong.com**%E2%80%9D%EF%BC%8C%E8%80%8C%E4%BD%A0%E8%BF%9E%E7%9A%84%E6%98%AF" target="_blank" rel="noreferrer">www.52wukong.com**”，而你连的是</a> <strong>test.gtctrader1203.top</strong>。</p></blockquote><p>高度怀疑以下其一：</p><ol><li><strong>该域名对应的某个前端节点没同步新证</strong>，你分配到了旧节点；</li><li><strong>Nginx/Ingress 上 <code>server_name</code> 未覆盖 <code>test.gtctrader1203.top</code></strong>，或 <code>listen 443 default_server</code> 上挂的是 <code>www.52wukong.com</code> 的证书，SNI 未命中时回落成它；</li><li><strong>CDN 边缘证书仍是旧证</strong>（即便你源站已更新，终端用户面对的是边缘证）。</li></ol><hr><h2 id="快速修复建议-按优先顺序" tabindex="-1">快速修复建议（按优先顺序） <a class="header-anchor" href="#快速修复建议-按优先顺序" aria-label="Permalink to &quot;快速修复建议（按优先顺序）&quot;">​</a></h2><ol><li><p><strong>逐 IP 定位“哪个节点回错证”</strong>（上面的 <code>--resolve</code>/<code>s_client</code> 方法）。</p><ul><li>只要锁定是<strong>个别 IP</strong>，去那台机器/那组 Listener 上换证或改 server 块即可。</li></ul></li><li><p><strong>检查 Nginx/Ingress 配置</strong></p><ul><li><code>server_name</code> 必须包含 <code>test.gtctrader1203.top</code>；</li><li>该 <code>server</code> 块下挂的 <code>ssl_certificate</code> 必须是<strong>包含该主机名</strong>的证书；</li><li>避免把“别站”的证书挂在 <code>default_server</code> 上；</li><li>如用 L4 <code>stream</code> 代理，要么启用 <code>ssl_preread</code> + SNI 分流，要么用 SAN 证书覆盖所有域名。(<a href="https://serverfault.com/questions/923501/why-does-nginx-require-default-ssl-server-to-have-a-certificate?utm_source=chatgpt.com" title="Why does nginx require default ssl server to have a ..." target="_blank" rel="noreferrer">Server Fault</a>)</li></ul></li><li><p><strong>有 CDN 就到 CDN 控制台核证书</strong></p><ul><li>确认 <code>test.gtctrader1203.top</code> 的<strong>边缘证书</strong>已签发/部署；</li><li>必要时<strong>关开 Universal SSL</strong>触发重签；模式改成 <strong>Full (strict)</strong> 并确保证书链完整。(<a href="https://community.cloudflare.com/t/ssl-hostname-mismatch-error-after-certificate-renewal-process/630523?utm_source=chatgpt.com" title="SSL Hostname Mismatch Error After Certificate Renewal ..." target="_blank" rel="noreferrer">Cloudflare 社区</a>)</li></ul></li><li><p><strong>本机验证刷新</strong></p><ul><li>清理本机 DNS 缓存，或直接 <code>--resolve</code> 固定 IP 测；</li><li>换网络（手机热点）排除上游缓存。</li></ul></li></ol><hr><h2 id="一键对照脚本-拷贝即用" tabindex="-1">一键对照脚本（拷贝即用） <a class="header-anchor" href="#一键对照脚本-拷贝即用" aria-label="Permalink to &quot;一键对照脚本（拷贝即用）&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1) 看解析</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nslookup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2) 逐 IP 验证证书（把 X.X.X.X 换成上步查到的每个 IP）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X.X.X.X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Y.Y.Y.Y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;== testing </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s_client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -servername</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -subject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -issuer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dates</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3) 直连域名（含 SNI）看当前边缘/节点到底回什么证（不固定 IP）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s_client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -servername</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.gtctrader1203.top</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -subject</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -issuer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dates</span></span></code></pre></div><hr><h2 id="小贴士" tabindex="-1">小贴士 <a class="header-anchor" href="#小贴士" aria-label="Permalink to &quot;小贴士&quot;">​</a></h2><ul><li><strong>只改源站证书不一定生效到终端用户</strong>：如果前面有 CDN/边缘/负载，<strong>用户看到的是最前端的证书</strong>。</li><li><strong>WSS 与 HTTPS 的“混合内容”限制</strong>：HTTPS 页面不能连 <code>ws://</code>，但 HTTP 页面可以连 <code>wss://</code>——与你的场景无关（你是 <code>http://localhost</code> → <code>wss://…</code>，是允许的）。(<a href="https://stackoverflow.com/questions/9745249/websocket-with-ssl?utm_source=chatgpt.com" title="WebSocket with SSL" target="_blank" rel="noreferrer">Stack Overflow</a>)</li><li><strong>诊断一定带 <code>-servername</code></strong>：否则很多工具（含 <code>openssl s_client</code>）可能取默认证书，掩盖 SNI 问题本质。(<a href="https://major.io/p/using-openssls-s_client-command-with-web-servers-using-server-name-indication-sni/?utm_source=chatgpt.com" title="Using OpenSSL&#39;s s_client command with web servers ..." target="_blank" rel="noreferrer">Major Hayden</a>)</li></ul><hr><h2 id="复盘-checklist-上线前自测-5-条" tabindex="-1">复盘 checklist（上线前自测 5 条） <a class="header-anchor" href="#复盘-checklist-上线前自测-5-条" aria-label="Permalink to &quot;复盘 checklist（上线前自测 5 条）&quot;">​</a></h2><ol><li><code>openssl s_client -servername test.gtctrader1203.top</code> 显示的 SAN <strong>包含该域名</strong>。</li><li>用 <code>--resolve</code> 针对 <strong>每个 IP</strong> 都验证过，不存在“某台还回旧证”。</li><li>CDN 控制台里 <code>test.gtctrader1203.top</code> 的<strong>边缘证书</strong>状态正常，模式 <strong>Full (strict)</strong>。</li><li>Nginx/Ingress 的 <code>server_name</code> 与证书匹配，<strong>default_server 不挂错证</strong>。</li><li>前端从 <code>http://localhost</code> 连 <code>wss://…</code> 正常，不存在“混合内容”问题。</li></ol><blockquote><p>如果需要，我可以根据你当前的 <strong>Nginx/Ingress/CDN 配置片段（只要关键几行）</strong>，给出“只改这几行”的修复版。</p></blockquote>`,45)])])}const g=i(n,[["render",l]]);export{d as __pageData,g as default};
