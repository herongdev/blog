import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.oqSrIbQK.js";const E=JSON.parse('{"title":"Vite 项目中静态导入 vs 动态导入的全面对比","description":"","frontmatter":{"title":"Vite 项目中静态导入 vs 动态导入的全面对比","date":"2025-09-13T00:00:00.000Z","categories":["前端工程化","Vite","设计模式"],"tags":["vite","import","代码分割","mfa","懒加载"]},"headers":[],"relativePath":"posts/架构与工程化/性能与稳定性/Vite 项目中静态导入 vs 动态导入的全面对比.md","filePath":"posts/架构与工程化/性能与稳定性/Vite 项目中静态导入 vs 动态导入的全面对比.md","lastUpdated":1758216284000}'),n={name:"posts/架构与工程化/性能与稳定性/Vite 项目中静态导入 vs 动态导入的全面对比.md"};function h(e,s,p,k,r,d){return t(),a("div",null,[...s[0]||(s[0]=[l(`<p>在做 <strong>MFA（二次验证）</strong> 的时候，你可能会遇到这样一个设计问题：<br> 验证器模块（短信、邮箱、App、WebAuthn 等）到底是 <strong>静态导入</strong>，还是用 <code>import()</code> 动态导入？</p><p>本文从 <strong>构建、运行时、调试、体验、MFA 实战选择</strong> 五个角度，把区别和最佳实践详细说明。</p><h2 id="一、语法层面对比" tabindex="-1">一、语法层面对比 <a class="header-anchor" href="#一、语法层面对比" aria-label="Permalink to &quot;一、语法层面对比&quot;">​</a></h2><h3 id="静态导入" tabindex="-1">静态导入 <a class="header-anchor" href="#静态导入" aria-label="Permalink to &quot;静态导入&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./verifiers/sms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sms_validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sms);</span></span></code></pre></div><ul><li><strong>在构建时</strong>就确定依赖关系。</li><li>编译产物会直接打进主 chunk。</li><li><code>async () =&gt; sms</code> 只是伪装成 Promise，不会触发代码分割。</li></ul><h3 id="动态导入" tabindex="-1">动态导入 <a class="header-anchor" href="#动态导入" aria-label="Permalink to &quot;动态导入&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sms_validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./verifiers/sms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>import()</code> 是运行时调用，返回真正的 Promise。</li><li>触发 <strong>代码分割</strong>，生成独立 chunk。</li><li>首次调用时才去加载。</li></ul><h2 id="二、构建层面区别" tabindex="-1">二、构建层面区别 <a class="header-anchor" href="#二、构建层面区别" aria-label="Permalink to &quot;二、构建层面区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>维度</th><th>静态导入</th><th>动态导入</th></tr></thead><tbody><tr><td><strong>打包方式</strong></td><td>打入入口 chunk</td><td>分割为独立 chunk</td></tr><tr><td><strong>首屏体积</strong></td><td>更大</td><td>更小</td></tr><tr><td><strong>Tree-shaking</strong></td><td>有效，但整个文件都会被打包进来</td><td>chunk 内也能摇树，但以文件为单位</td></tr><tr><td><strong>缓存策略</strong></td><td>和主包一起缓存，版本变了整体失效</td><td>独立 chunk，可单独缓存</td></tr></tbody></table><h2 id="三、运行时区别" tabindex="-1">三、运行时区别 <a class="header-anchor" href="#三、运行时区别" aria-label="Permalink to &quot;三、运行时区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>维度</th><th>静态导入</th><th>动态导入</th></tr></thead><tbody><tr><td><strong>首次加载</strong></td><td>已经在主包，无额外请求</td><td>触发一次异步加载</td></tr><tr><td><strong>延迟</strong></td><td>零延迟</td><td>首次有网络开销（弱网可能转圈）</td></tr><tr><td><strong>常用模块体验</strong></td><td>即点即用</td><td>首次点可能卡顿</td></tr><tr><td><strong>冷门模块体验</strong></td><td>白白拖慢首屏</td><td>不加载，节省资源</td></tr></tbody></table><h2 id="四、调试-ssr" tabindex="-1">四、调试 &amp; SSR <a class="header-anchor" href="#四、调试-ssr" aria-label="Permalink to &quot;四、调试 &amp; SSR&quot;">​</a></h2><ul><li><p><strong>调试</strong></p><ul><li>静态导入：调试时所有 verifier 都会随入口加载。</li><li>动态导入：调试时能直观看到 <code>verifiers-sms.js</code> 之类的分包。</li></ul></li><li><p><strong>SSR</strong></p><ul><li>静态导入：和 Node 端 <code>import</code> 行为一致。</li><li>动态导入：服务端执行时也会懒加载，需要注意 <code>ssr.noExternal</code> 设置。</li></ul></li></ul><h2 id="五、用户体验区别" tabindex="-1">五、用户体验区别 <a class="header-anchor" href="#五、用户体验区别" aria-label="Permalink to &quot;五、用户体验区别&quot;">​</a></h2><ul><li><p><strong>静态导入</strong></p><ul><li>优点：操作无延迟。</li><li>缺点：即使用户从不点“WebAuthn”，也把相关代码拉下来了。</li></ul></li><li><p><strong>动态导入</strong></p><ul><li>优点：只在需要时才拉；多用户场景下整体流量更省。</li><li>缺点：第一次点 WebAuthn 验证时，会有一次加载等待。</li></ul></li></ul><h2 id="六、vite-特性与额外点" tabindex="-1">六、Vite 特性与额外点 <a class="header-anchor" href="#六、vite-特性与额外点" aria-label="Permalink to &quot;六、Vite 特性与额外点&quot;">​</a></h2><ul><li><p><strong>预加载支持</strong> 动态导入可配合 <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> 或手动 <code>import()</code> 提前热身，减少等待。</p></li><li><p><strong>import.meta.glob</strong> 动态导入可以批量注册：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./verifiers/*.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modules[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./verifiers/sms.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]());</span></span></code></pre></div></li><li><p><strong>并发优化</strong> 多次点击同一验证器时，浏览器会复用动态导入的 Promise，不会重复请求。</p></li></ul><h2 id="七、在-mfa-场景的选择" tabindex="-1">七、在 MFA 场景的选择 <a class="header-anchor" href="#七、在-mfa-场景的选择" aria-label="Permalink to &quot;七、在 MFA 场景的选择&quot;">​</a></h2><p>MFA 有多种验证器：</p><ul><li><strong>短信/邮箱</strong>：实现简单、体积很小，<strong>常见场景</strong>几乎人人要用。</li><li><strong>App 验证器 / WebAuthn</strong>：可能引入加密、FIDO 库，体积较大，<strong>用户比例低</strong>。</li></ul><h3 id="最佳实践建议" tabindex="-1">最佳实践建议 <a class="header-anchor" href="#最佳实践建议" aria-label="Permalink to &quot;最佳实践建议&quot;">​</a></h3><ol><li><p><strong>常用、体积小的验证器（短信、邮箱） → 静态导入</strong></p><ul><li>避免点击时的首次加载延迟。</li><li>不会显著增加首屏体积。</li></ul></li><li><p><strong>少用、体积大的验证器（App、WebAuthn） → 动态导入</strong></p><ul><li>减少主包体积，首屏加载更快。</li><li>用户只有在触发时才会加载。</li></ul></li></ol><h3 id="混合模式写法" tabindex="-1">混合模式写法 <a class="header-anchor" href="#混合模式写法" aria-label="Permalink to &quot;混合模式写法&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 常用的静态导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./verifiers/sms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./verifiers/email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sms_validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sms);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email_validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 体积大的走动态导入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./verifiers/app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerVerifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;biometric_validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./verifiers/webauthn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="八、总结" tabindex="-1">八、总结 <a class="header-anchor" href="#八、总结" aria-label="Permalink to &quot;八、总结&quot;">​</a></h2><ul><li><p><strong>静态导入</strong>：快，但拖大首屏。</p></li><li><p><strong>动态导入</strong>：首屏轻，但首次交互有延迟。</p></li><li><p><strong>MFA 实战</strong>：推荐 <strong>混合策略</strong>——</p><ul><li><strong>短信/邮箱</strong>：静态导入（高频 + 小体积）。</li><li><strong>App/WebAuthn</strong>：动态导入（低频 + 大体积）。</li></ul></li></ul><p>这样既保证了<strong>日常操作流畅</strong>，又兼顾了<strong>首屏性能和扩展性</strong>。 🚀</p>`,29)])])}const g=i(n,[["render",h]]);export{E as __pageData,g as default};
