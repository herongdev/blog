import{_ as s,c as a,o as l,ag as n}from"./chunks/framework.oqSrIbQK.js";const c=JSON.parse('{"title":"Kotlin 入门（1）：Hello World 与变量常量","description":"","frontmatter":{"title":"Kotlin 入门（1）：Hello World 与变量常量","date":"2025-09-12T00:00:00.000Z","categories":["Kotlin 快速入门"],"tags":["Kotlin","Android","编程入门","AI学习"]},"headers":[],"relativePath":"posts/kotlin快速入门/第一部分：基础必备/Kotlin 入门（1）：Hello World 与变量常量.md","filePath":"posts/kotlin快速入门/第一部分：基础必备/Kotlin 入门（1）：Hello World 与变量常量.md","lastUpdated":1758216284000}'),t={name:"posts/kotlin快速入门/第一部分：基础必备/Kotlin 入门（1）：Hello World 与变量常量.md"};function e(h,i,p,k,o,d){return l(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="kotlin-入门-1-hello-world-与变量常量" tabindex="-1">Kotlin 入门（1）：Hello World 与变量常量 <a class="header-anchor" href="#kotlin-入门-1-hello-world-与变量常量" aria-label="Permalink to &quot;Kotlin 入门（1）：Hello World 与变量常量&quot;">​</a></h1><p>在 AI 时代，我们学习 Kotlin 的目标不是背诵语法，而是 <strong>快速能看懂 AI 生成的代码</strong>，并能写出简单功能。本篇文章带你用最短的路径跑通第一个 Kotlin 程序，并掌握「变量与常量」的写法。</p><h2 id="_1-第一个-kotlin-程序" tabindex="-1">1. 第一个 Kotlin 程序 <a class="header-anchor" href="#_1-第一个-kotlin-程序" aria-label="Permalink to &quot;1. 第一个 Kotlin 程序&quot;">​</a></h2><p>Kotlin 的入口和其它语言类似，一个 <code>main</code> 函数就能跑起来。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行后输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello, Kotlin!</span></span></code></pre></div><ul><li><code>fun</code> 表示函数</li><li><code>main</code> 是程序入口</li><li><code>println</code> 用来打印内容到控制台</li></ul><h2 id="_2-变量与常量" tabindex="-1">2. 变量与常量 <a class="header-anchor" href="#_2-变量与常量" aria-label="Permalink to &quot;2. 变量与常量&quot;">​</a></h2><p>在 Kotlin 中，声明变量有两种方式：</p><h3 id="可变变量-var" tabindex="-1">可变变量：<code>var</code> <a class="header-anchor" href="#可变变量-var" aria-label="Permalink to &quot;可变变量：\`var\`&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>var</code> 声明的变量可以修改</li><li>Kotlin 会自动推断类型（这里 <code>age</code> 是 <code>Int</code> 类型）</li></ul><h3 id="不可变变量-val" tabindex="-1">不可变变量：<code>val</code> <a class="header-anchor" href="#不可变变量-val" aria-label="Permalink to &quot;不可变变量：\`val\`&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 Alice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // name = &quot;Bob&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ❌ 报错：val 不能重新赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>val</code> 相当于常量，只能赋值一次</li><li>推荐 <strong>能用 <code>val</code> 就用 <code>val</code></strong>，保证安全性</li></ul><h2 id="_3-指定类型" tabindex="-1">3. 指定类型 <a class="header-anchor" href="#_3-指定类型" aria-label="Permalink to &quot;3. 指定类型&quot;">​</a></h2><p>Kotlin 通常能自动推断类型，但你也可以显式声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pi: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;admin&quot;</span></span></code></pre></div><p>常见类型有：</p><ul><li><code>Int</code>：整数</li><li><code>Double</code>：小数</li><li><code>Boolean</code>：布尔值</li><li><code>String</code>：字符串</li></ul>`,21)])])}const g=s(t,[["render",e]]);export{c as __pageData,g as default};
