import{_ as s,c as a,o as l,ag as t}from"./chunks/framework.oqSrIbQK.js";const c=JSON.parse('{"title":"Swift 入门（16）：访问控制","description":"","frontmatter":{"title":"Swift 入门（16）：访问控制","date":"2025-09-14T00:00:00.000Z","categories":"Swift","tags":["Swift","iOS","教程"]},"headers":[],"relativePath":"posts/swift-quickstart/16-访问控制.md","filePath":"posts/swift-quickstart/16-访问控制.md","lastUpdated":1758163069000}'),n={name:"posts/swift-quickstart/16-访问控制.md"};function e(h,i,p,r,k,o){return l(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="swift-入门-16-访问控制" tabindex="-1">Swift 入门（16）：访问控制 <a class="header-anchor" href="#swift-入门-16-访问控制" aria-label="Permalink to &quot;Swift 入门（16）：访问控制&quot;">​</a></h1><blockquote><p>Swift 提供访问控制（Access Control）来保护代码的内部实现。<br> 通过 <code>open</code>、<code>public</code>、<code>internal</code>、<code>fileprivate</code>、<code>private</code> 关键字控制作用范围。</p></blockquote><h2 id="_1-五种访问级别" tabindex="-1">1. 五种访问级别 <a class="header-anchor" href="#_1-五种访问级别" aria-label="Permalink to &quot;1. 五种访问级别&quot;">​</a></h2><ol><li><strong>open</strong><ul><li>最宽松，允许模块外使用，并且可以继承 / 重写。</li><li>主要用于 <strong>框架对外 API</strong>。</li></ul></li><li><strong>public</strong><ul><li>模块外可以使用，但不能继承或重写。</li><li>适合对外只读的接口。</li></ul></li><li><strong>internal</strong>（默认） <ul><li>只能在 <strong>同一模块</strong> 内使用。</li><li>一般项目中大部分代码都是 <code>internal</code>。</li></ul></li><li><strong>fileprivate</strong><ul><li>限制在 <strong>同一个文件</strong> 内访问。</li></ul></li><li><strong>private</strong><ul><li>最严格，限制在 <strong>同一个作用域</strong>（类 / 结构体）内使用。</li></ul></li></ol><h2 id="_2-使用示例" tabindex="-1">2. 使用示例 <a class="header-anchor" href="#_2-使用示例" aria-label="Permalink to &quot;2. 使用示例&quot;">​</a></h2><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> publicMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> internalMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fileprivate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filePrivateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> privateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OpenClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publicMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 可访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">internalMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 同模块可访问</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj.filePrivateMethod() ❌ 其他文件不可访问</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj.privateMethod() ❌ 作用域外不可访问</span></span></code></pre></div><h2 id="_3-常见使用场景" tabindex="-1">3. 常见使用场景 <a class="header-anchor" href="#_3-常见使用场景" aria-label="Permalink to &quot;3. 常见使用场景&quot;">​</a></h2><ul><li><strong>open</strong>：SDK / Framework 提供可继承的基类。</li><li><strong>public</strong>：模块对外公开的常量或函数。</li><li><strong>internal</strong>：默认级别，适合大部分业务代码。</li><li><strong>fileprivate</strong>：隐藏某些工具函数。</li><li><strong>private</strong>：保护类内部细节。</li></ul><h2 id="_4-注意事项" tabindex="-1">4. 注意事项 <a class="header-anchor" href="#_4-注意事项" aria-label="Permalink to &quot;4. 注意事项&quot;">​</a></h2><ul><li>属性、方法、初始化器、扩展都可以设置访问级别。</li><li>子类的访问级别不能高于父类。</li><li>协议的访问级别会影响其实现。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>Swift 默认访问级别是 <code>internal</code>。</li><li>最常用的是 <code>internal</code> + <code>private</code>，只在需要开放 API 时用 <code>public</code> 或 <code>open</code>。</li></ul>`,12)])])}const g=s(n,[["render",e]]);export{c as __pageData,g as default};
